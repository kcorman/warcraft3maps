package CustomAbilities
import AbilityIds
import AbilityObjEditing
import Assets
import Lightning
import ChannelAbilityPreset
import ObjectIdGenerator

public constant NoDmgFirebolt = compiletime(ABIL_ID_GEN.next())

@compiletime function gen1()
	new AbilityDefinitionFireBolt(NoDmgFirebolt)
		..setLevels(4)
		..setName("No Dmg Firebolt")
        ..presetDamage(lvl -> 0)
        ..setButtonPositionNormalX(3)
        ..setButtonPositionNormalY(2)
        ..setButtonPositionResearchX(3)
        ..setIconNormal(Icons.bTNImmolationOn)
        ..setIconResearch(Icons.bTNImmolationOn)
        ..presetDurationHero(lvl -> 0)
        ..presetDurationNormal(lvl -> 0)

public constant GhostLightning = compiletime(ABIL_ID_GEN.next())

@compiletime function gen2()
	new AbilityDefinitionChainLightningcreep(GhostLightning)
		..setLevels(2)
        ..setName("Ghsot Lightning")
        ..presetDamageperTarget(lvl -> (lvl * 100).toReal())
        ..presetDamageReductionperTarget(lvl -> -.5)
        ..presetCooldown(lvl -> 10.)
        ..presetCastingTime(lvl -> 4.5 - (1.5 * lvl))
        ..presetManaCost(lvl -> 100)
        ..setLightningEffects(LIGHTNING_MANA_BURN)
        ..presetNumberofTargetsHit(lvl -> 15)
        ..setButtonPositionNormalX(0)
        ..setButtonPositionNormalY(2)
        ..setButtonPositionResearchX(0)


public constant ghoulJump = compiletime(ABIL_ID_GEN.next())
@compiletime function genGhoulJump()
    new AbilityDefinitionFireBolt(ghoulJump)
        ..setHeroAbility(false)
        ..setLevels(2)
        ..setArtTarget("")
        ..setArtEffect("")
        ..setMissileArt("")
		..setName("No Dmg Firebolt")
        ..presetDamage(lvl -> 0)
        ..presetManaCost(lvl -> 0)
        ..presetCooldown(lvl -> 10.0)
        ..setButtonPositionNormalX(0)
        ..setButtonPositionNormalY(2)
        ..setIconNormal(Icons.bTNImmolationOn)
        ..setIconResearch(Icons.bTNImmolationOn)
        ..presetDurationHero(lvl -> .04)
        ..presetDurationNormal(lvl -> .04)

public constant learnAbility = compiletime(ABIL_ID_GEN.next())
@compiletime function learnAbility()
    new AbilityDefinitionShadowHunterHealingWave(learnAbility)
        ..setLevels(4)
        ..setArtTarget("")
        ..setCheckDependencies(false)
        ..setLightningEffects(LIGHTNING_DRAIN_MANA)
        ..setName("Pick Their Brain")
        ..setTooltipLearn("Learn Pick Their Brain (D)")
        ..setTooltipLearnExtended("Picks the targets brain, learning their (Q) ability. Some side effects may occur to the target.")
        ..presetTooltipNormal(lvl -> "Pick Their Brain (D) - Level " + lvl.toString())
        ..presetTooltipNormalExtended(lvl -> "Picks the targets brain, learning their (Q) ability. Some side effects may occur to the target. Resulting ability will be level " + lvl.toString())
        ..presetDamageperTarget(lvl -> 0)
        ..presetNumberofTargetsHit(lvl -> 1)
        ..presetManaCost(lvl -> 150)
        ..presetCastRange(lvl -> 200)
        ..presetHotkey("D")
        ..presetCooldown(lvl -> 45.0)
        ..presetButtonPosResearch(0, 0)
        ..presetButtonPosNormal(1, 1)
        ..setIconNormal(Icons.bTNLifeDrain)
        ..setIconResearch(Icons.bTNLifeDrain)

public constant skillCoilEffect = compiletime(ABIL_ID_GEN.next())
@compiletime function genSkillCoilEffect()
    new AbilityDefinitionDeathCoilcreep(skillCoilEffect)
        ..setHeroAbility(false)
        ..setLevels(1)
        ..setName("Skill coil effect")
        ..presetAmountHealedDamaged(lvl -> 1000.)
        ..presetManaCost(lvl -> 0)
        ..presetCooldown(lvl -> 0.0)
        ..setButtonPositionNormalX(0)
        ..setButtonPositionNormalY(2)
        ..presetDurationHero(lvl -> 0)
        ..presetDurationNormal(lvl -> 0)

public constant healthBind = compiletime(ABIL_ID_GEN.next())
@compiletime function genHealthBind()
    new AbilityDefinitionSlowCreep(healthBind)
        ..setHeroAbility(false)
        ..setLevels(1)
        ..presetDurationHero(lvl -> lvl * 8.)
        ..presetDurationNormal(lvl -> lvl * 8.)
        ..presetBuffs(lvl -> commaList('B003'))
        ..presetManaCost(lvl -> 50)
        ..presetCooldown(lvl -> 14)
        ..presetCastRange(lvl -> 800)
        ..setButtonPositionNormalX(0)
        ..setButtonPositionNormalY(2)

public constant counterStrike = compiletime(ABIL_ID_GEN.next())
@compiletime function gen3()
    new ChannelAbilityPreset(counterStrike, 5, true)
        ..setHeroAbility(true)
        ..presetTargetTypes(Targettype.NONE) // Set the target type for all levels
        ..presetTooltipNormal(lvl -> "Counter Strike (Q) - Level " + lvl.toString())
        ..presetDurationHero(lvl -> 3.)
        ..presetTooltipNormalExtended(lvl -> "Stand and channel for up to 5 seconds. When cancelled or finished, deal more damage back to the bad guys")
        ..presetCooldown(lvl -> 15)
        ..presetCastRange(lvl -> 9999.)
        ..presetHotkey("Q")
        ..presetButtonPosNormal(0, 2)
        ..presetButtonPosResearch(0, 0)
        ..presetIcon(Icons.bTNEvasion)

public constant telekenesis = compiletime(ABIL_ID_GEN.next())
@compiletime function genTK()
    new ChannelAbilityPreset(telekenesis, 4, true)
        ..setHeroAbility(true)
        ..presetTargetTypes(Targettype.POINT) // Set the target type for all levels
        ..presetOption(Option.TARGETIMAGE, true)
        ..presetAreaofEffect(lvl -> (100 + 100 * lvl).toReal())
        ..presetTooltipNormal(lvl -> "Telekenesis (Z) - Level " + lvl.toString())
        ..presetTooltipNormalExtended(lvl -> "Grabs hold of all units in the target group. Use right click to order units around while they are effected. Lasts " + (2 + lvl * 2).toString() + " seconds.")
        ..presetDurationHero(lvl -> 1.)
        ..setTooltipLearn("Learn Telekenesis (Z)")
        ..setTooltipLearnExtended( "Grabs hold of all units in the target group. Use right click to order units around while they are effected.")
        ..presetCooldown(lvl -> 15)
        ..presetCastRange(lvl -> 600 + (200 * lvl).toReal())
        ..presetHotkey("Z")
		..presetFollowThroughTime(lvl -> (2 + lvl * 2).toReal())

        ..presetButtonPosNormal(1, 2)
        ..presetButtonPosResearch(1, 0)
        ..presetIcon(Icons.bTNBanish)

public constant SEDUCE = compiletime(ABIL_ID_GEN.next())
@compiletime function genSeduce()
    new ChannelAbilityPreset(SEDUCE, 4, true)
        ..setHeroAbility(true)
        ..presetTargetTypes(Targettype.POINT) // Set the target type for all levels
        ..presetOption(Option.TARGETIMAGE, true)
        ..presetAreaofEffect(lvl -> (250).toReal())
        ..presetTooltipNormal(lvl -> "Seduce (Q) - Level " + lvl.toString())
        ..presetTooltipNormalExtended(lvl -> "Units in the target region are seduced into fighting for the demoness for up to " + (2 + 2 * lvl).toString() + " seconds.")
        ..presetDurationHero(lvl -> 1.)
        ..setAnimationNames("spell,channel,looping")
        ..setTooltipLearn("Learn Seduce (Q)")
        ..setTooltipLearnExtended( "Units in the target region are seduced into fighting for the demoness while she is channeling")
        ..presetCooldown(lvl -> 25)
        ..presetHotkey("Q")
		..presetFollowThroughTime(lvl -> (2 + lvl * 2).toReal())
        ..presetButtonPosNormal(0, 2)
        ..presetManaCost(lvl -> 110)
        ..presetCastRange(lvl -> 100)
        ..presetButtonPosResearch(0, 0)
        ..presetIcon(Icons.bTNDemoness)

public constant HARVEST_SOULS = compiletime(ABIL_ID_GEN.next())
@compiletime function genHarvestSouls()
    new AbilityDefinitionEvasion(HARVEST_SOULS)
        ..setHeroAbility(false)
        ..presetChancetoEvade(lvl -> 0)
        ..presetTooltipNormal(lvl -> "Soul Harvest")
        ..presetTooltipNormalExtended(lvl -> "This unit harvests the souls from its victims, storing them for later use")
        ..presetButtonPosNormal(0, 1)
        ..presetIcon(Icons.pASBTNImmolation)

public constant DEMON_DASH = compiletime(ABIL_ID_GEN.next())
@compiletime function genDemonDash()
    new ChannelAbilityPreset(DEMON_DASH, 4, true)
        ..setHeroAbility(true)
        ..presetTargetTypes(Targettype.UNIT) // Set the target type for all levels
        ..presetOption(Option.PHYSICALSPELL, true)
        ..presetAreaofEffect(lvl -> (250).toReal())
        ..presetTooltipNormal(lvl ->  "Demon Dash (W) - Level " + lvl.toString())
        ..presetTooltipNormalExtended(lvl -> "Teleport a short distance and attack the target, dealing 50 + " + (lvl * 100).toString() + "% weapon damage. Cooldown resets if the target is killed")
        ..presetDurationHero(lvl -> 1.)
        ..presetManaCost(lvl -> 45)
        ..setAnimationNames("attack,third")
        ..setTooltipLearn("Learn Demon Dash (W)")
        ..setTooltipLearnExtended( "Teleport a short distance and attack the target, dealing weapon damage. Cooldown resets if the target is killed")
        ..presetCooldown(lvl -> 5)
        ..presetHotkey("W")
        ..presetCastRange(lvl -> 300)
		..presetFollowThroughTime(lvl -> 0)
        ..presetButtonPosNormal(1, 2)
        ..presetButtonPosResearch(1, 0)
        ..presetIcon(Icons.bTNVampiricAura)

public constant SUMMON_SOUL_WYRM = compiletime(ABIL_ID_GEN.next())
@compiletime function genSoulWyrm()
    new ChannelAbilityPreset(SUMMON_SOUL_WYRM, 1, true)
        ..setHeroAbility(true)
        ..presetTargetTypes(Targettype.POINT)
        ..presetAreaofEffect(lvl -> (150).toReal())
        ..setRequiredLevel(6)
        ..setLevelSkipRequirement(6)
        ..presetTooltipNormal(lvl ->  "Summon Soul Wyrm (R) - Level " + lvl.toString())
        ..presetTooltipNormalExtended(lvl -> "Summons a powerful Soul Wyrm to do your bidding. Requires 10 Souls to create, and then can be fed more souls to grow it in power")
        ..presetDurationHero(lvl -> 1.)
        ..presetManaCost(lvl -> 150)
        ..setAnimationNames("spell,special")
        ..setTooltipLearn("Learn Summon Soul Wyrm (R)")
        ..setTooltipLearnExtended( "Summons a powerful Soul Wyrm to do your bidding. Requires 10 Souls to create, and then can be fed more souls to grow it in power")
        ..presetCooldown(lvl -> 60)
        ..presetHotkey("R")
        ..presetCastRange(lvl -> 400)
		..presetFollowThroughTime(lvl -> 3)
        ..presetButtonPosNormal(3, 2)
        ..presetButtonPosResearch(3, 0)
        ..presetIcon("war3mapImported\\BTNShadowDragon.blp")

public constant CONSUME_SOUL = compiletime(ABIL_ID_GEN.next())
@compiletime function genConsumeSoul()
    new ChannelAbilityPreset(CONSUME_SOUL, 1, true)
        ..setHeroAbility(false)
        ..presetTargetTypes(Targettype.UNIT)
        ..presetAreaofEffect(lvl -> (150).toReal())
        ..presetTooltipNormal(lvl ->  "Consume Souls (Q)")
        ..presetTooltipNormalExtended(lvl -> "Feast on the Mistress's captured souls")
        ..presetDurationHero(lvl -> 1.)
        ..presetManaCost(lvl -> 0)
        ..setAnimationNames("spell,devour")
        ..presetCooldown(lvl -> 0)
        ..presetHotkey("Q")
        ..presetCastRange(lvl -> 300)
		..presetFollowThroughTime(lvl -> 10)
        ..presetButtonPosNormal(0, 2)
        ..presetIcon(Icons.bTNDevourMagic)
        
public constant SOUL_FIRE = compiletime(ABIL_ID_GEN.next())
@compiletime function genSoulFire()
    new ChannelAbilityPreset(SOUL_FIRE, 4, true)
        ..setHeroAbility(true)
        ..presetTargetTypes(Targettype.POINT) // Set the target type for all levels
        ..presetOption(Option.TARGETIMAGE, false)
        ..presetAreaofEffect(lvl -> (100).toReal())
        ..presetTooltipNormal(lvl ->  "Soul Fire (E) - Level " + lvl.toString())
        ..presetTooltipNormalExtended(lvl -> "Release a pillar of soul fire that burns all enemy units in front of the caster in a line. Consumes 1 Soul")
        ..presetDurationHero(lvl -> 1.)
        ..presetManaCost(lvl -> 0)
        ..setAnimationNames("spell")
        ..setTooltipLearn("Learn Soul Fire (E)")
        ..setTooltipLearnExtended( "Release a pillar of soul fire that burns all enemy units in front of the caster in a line. Consumes 1 Soul")
        ..presetCooldown(lvl -> 12)
        ..presetHotkey("E")
        ..presetCastRange(lvl -> 300)
		..presetFollowThroughTime(lvl -> .5)
        ..presetButtonPosNormal(2, 2)
        ..presetButtonPosResearch(2, 0)
        ..presetIcon(Icons.bTNSoulBurn)

public constant sylarWatch = compiletime(ABIL_ID_GEN.next())
@compiletime function genWatch()
    new ChannelAbilityPreset(sylarWatch, 3, true)
        ..setHeroAbility(true)
        ..setLevelSkipRequirement(6)
        ..presetTargetTypes(Targettype.POINT) // Set the target type for all levels
        ..presetOption(Option.TARGETIMAGE, true)
        ..presetAreaofEffect(lvl -> (100 + 100 * lvl).toReal())
        ..presetCooldown(lvl -> 60)
        ..presetTooltipNormal(lvl -> "Tick Tock (R) - Level " + lvl.toString())
        ..presetTooltipNormalExtended(lvl -> "Creates a giant clock out of lightning that hurts enemies")
        ..presetDurationHero(lvl -> 3.)
        ..setTooltipLearn("Learn Tick Tock (R)")
        ..setTooltipLearnExtended( "Creates a giant clock out of lightning that hurts enemies")
        ..presetCooldown(lvl -> 75)
        ..setRequiredLevel(6)
        ..presetCastRange(lvl -> 300)
        ..presetHotkey("R")
        ..presetButtonPosNormal(3, 2)
        ..presetButtonPosResearch(3, 0)
        ..presetIcon(Icons.bTNMonsoon)

public constant sylarFrostNova = compiletime(ABIL_ID_GEN.next())
@compiletime function sylarFrostNova()
    new AbilityDefinitionLichFrostNova(sylarFrostNova)
        ..setLevels(4)
        ..presetAreaofEffectDamage(lvl -> (lvl * 75).toReal())
        ..presetAreaofEffect(lvl -> 200.)
        ..setTooltipLearn("Learn Frost Nova (X)")
        ..setTooltipLearnExtended("It's just frost nova. Those other spells took so long to write triggers for I had to cut corners somewhere. But hey, it does damage. And Sylar did have frost powers in the show so it's canon. Also this ability does do an additional bit of damage to the target based off of your intelligence")
        ..presetTooltipNormal(lvl -> "Frost Nova (X) - Level " + lvl.toString())
        ..presetTooltipNormalExtended(lvl -> "It's just frost nova. Those other spells took so long to write triggers for I had to cut corners somewhere. But hey, it does damage. And Sylar did have frost powers in the show so it's canon")
        ..presetHotkey("X")
        ..presetSpecificTargetDamage(lvl -> 0)
        ..presetManaCost(lvl -> 100)
        ..presetCooldown(lvl -> (8 - lvl).toReal())
        ..presetButtonPosNormal(2, 2)
        ..presetButtonPosResearch(2, 0)

public constant sylarLearnAbility0 = compiletime(ABIL_ID_GEN.next())
public constant sylarLearnAbility1 = compiletime(ABIL_ID_GEN.next())
public constant sylarLearnAbility2 = compiletime(ABIL_ID_GEN.next())
@compiletime function genSylar()
    genS(sylarLearnAbility0)
    genS(sylarLearnAbility1)
    genS(sylarLearnAbility2)
function genS(int id)
    new ChannelAbilityPreset(id, 1, true)
        ..makeUnitSpell(0, 60)
        ..presetTargetTypes(Targettype.NONE) // Set the target type for all levels
        ..presetTooltipNormal(lvl -> "Counter Strike (Q) - Level " + lvl.toString())
        ..presetDurationHero(lvl -> 0.1)
        ..presetTooltipNormalExtended(lvl -> "Stand and channel for up to 5 seconds. When cancelled or finished, deal more damage back to the bad guys")
        ..presetHotkey("Q")
        ..presetButtonPosNormal(0, 2)
        ..presetButtonPosResearch(0, 0)
        ..presetIcon(Icons.bTNEvasion)


public function createAttackBonusAbility(int dmg) returns int
    int id = ABIL_ID_GEN.next()
    new AbilityDefinitionAttackBonusAIt9(id)
        .setAttackBonus(1, dmg)
    return id
public function createArmorBonusAbility(int amt) returns int
    int id = ABIL_ID_GEN.next()
    new AbilityDefinitionDefenseBonusPlus1(id)
        ..setDefenseBonus(1, amt)
    return id

public function createStatBonusAbility(int intel, int str, int agil) returns int
    int id = ABIL_ID_GEN.next()
    AbilityDefinitionIntelligenceBonusPlus1 def = new AbilityDefinitionIntelligenceBonusPlus1(id)
    def.setIntelligenceBonus(1, intel)
    if(str > 0)
        def.setStrengthBonus(1, str)
    if(agil > 0)
        def.setAgilityBonus(1, agil)
    return id




