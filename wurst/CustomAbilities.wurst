package CustomAbilities
import AbilityIds
import AbilityObjEditing
import BuffObjEditing
import Assets
import Lightning
import ChannelAbilityPreset
import TargetsAllowed
import CustomSummonedUnits
import ObjectIdGenerator
import CustomUnitIds

public constant NoDmgFirebolt = compiletime(ABIL_ID_GEN.next())

@compiletime function gen1()
	new AbilityDefinitionFireBolt(NoDmgFirebolt)
		..setLevels(4)
		..setName("No Dmg Firebolt")
        ..presetDamage(lvl -> 0)
        ..setButtonPositionNormalX(3)
        ..setButtonPositionNormalY(2)
        ..setButtonPositionResearchX(3)
        ..setIconNormal(Icons.bTNImmolationOn)
        ..setIconResearch(Icons.bTNImmolationOn)
        ..presetDurationHero(lvl -> 0.04)
        ..presetDurationNormal(lvl -> 0.04)

public constant ABILITY_SET_FIRE = compiletime(ABIL_ID_GEN.next())
@compiletime function gen4()
	new AbilityDefinitionFireBolt(ABILITY_SET_FIRE)
		..setLevels(1)
		..setName("Set On Fire")
        ..presetDamage(lvl -> 0)
        ..setButtonPositionNormalX(0)
        ..setMissileArt(Abilities.redDragonMissile)
        ..setMissileSpeed(600)
        ..setButtonPositionNormalY(2)
        ..setButtonPositionResearchX(3)
        ..setIconNormal(Icons.bTNImmolationOn)
        ..presetManaCost(lvl -> 100)
        ..presetCooldown(lvl -> 20)
        ..setIconResearch(Icons.bTNImmolationOn)
        ..presetDurationHero(lvl -> 0.04)
        ..presetDurationNormal(lvl -> 0.04)
public constant ABILITY_STUN = compiletime(ABIL_ID_GEN.next())
@compiletime function genStun()
	new AbilityDefinitionFireBolt(ABILITY_STUN)
		..setLevels(1)
		..setName("Stun")
        ..presetDamage(lvl -> 0)
        ..setButtonPositionNormalX(0)
        ..setMissileArt("")
        ..setMissileSpeed(3000)
        ..setButtonPositionNormalY(0)
        ..setButtonPositionResearchX(0)
        ..setIconNormal(Icons.bTNImmolationOn)
        ..presetManaCost(lvl -> 0)
        ..presetCooldown(lvl -> 20)
        ..setIconResearch(Icons.bTNImmolationOn)
        ..presetDurationHero(lvl -> 3)
        ..presetDurationNormal(lvl -> 3)

public constant ABILITY_FEAR_SINGLE_TARGET = compiletime(ABIL_ID_GEN.next())
@compiletime function genFear()
	new AbilityDefinitionFireBolt(ABILITY_FEAR_SINGLE_TARGET)
		..setLevels(1)
		..setName("Fear")
        ..presetDamage(lvl -> 0)
        ..setButtonPositionNormalX(0)
        ..setMissileArt("")
        ..setMissileSpeed(3000)
        ..setButtonPositionNormalY(0)
        ..setButtonPositionResearchX(0)
        ..setIconNormal(Icons.bTNHowlOfTerror)
        ..presetManaCost(lvl -> 50)
        ..presetCooldown(lvl -> 12)
        ..setIconResearch(Icons.bTNHowlOfTerror)
        ..presetDurationHero(lvl -> .04)
        ..presetDurationNormal(lvl -> .04)

public constant ABILITY_WATER_SLOW_AURA = compiletime(ABIL_ID_GEN.next())
@compiletime function genWaterSlowAura()
	new AbilityDefinitionAuraEnduranceCreep(ABILITY_WATER_SLOW_AURA)
		..setLevels(1)
        ..setName("Slow Aura")
        ..presetTargetsAllowed(lvl -> TargetsAllowed.enemies)
        ..presetAttackSpeedIncrease(lvl -> -.25)
        ..presetMovementSpeedIncrease(lvl -> -.75)
        ..presetAreaofEffect(lvl -> 250)
        ..setArtTarget(Abilities.manaDrainCaster)

public constant ABILITY_SUMMON_VOID_RIFT = compiletime(ABIL_ID_GEN.next())
@compiletime function genVoidRift()
	new AbilityDefinitionInferno(ABILITY_SUMMON_VOID_RIFT)
        ..setLevels(1)
        ..setHeroAbility(false)
		..setName("Void Rift")
        ..presetDamage(lvl -> 500)
        ..presetSummonedUnit(lvl -> "")
        ..setButtonPositionNormalX(0)
        ..setMissileArt("")
        ..setMissileSpeed(3000)
        ..setArtEffect("war3mapImported\\Void Rain.mdx")
        ..presetDuration(lvl -> 30)
        ..presetCooldown(lvl -> 10)
        ..setButtonPositionNormalY(0)
        ..setButtonPositionResearchX(0)
        ..setIconNormal(Icons.bTNHowlOfTerror)
        ..presetManaCost(lvl -> 150)
        ..setIconResearch(Icons.bTNHowlOfTerror)
        ..presetDurationHero(lvl -> .04)
        ..presetDurationNormal(lvl -> .04)


public constant ABILITY_NECK_FREEZE = compiletime(ABIL_ID_GEN.next())
@compiletime function genNeckFreeze()
	new AbilityDefinitionFrostNovacreep(ABILITY_NECK_FREEZE)
		..setLevels(1)
		..setName("Neck Freeze")
        ..presetSpecificTargetDamage(lvl -> 0)
        ..setButtonPositionNormalX(0)
        ..setButtonPositionNormalY(2)
        ..setButtonPositionResearchX(3)
        ..presetManaCost(lvl -> 100)
        ..presetCooldown(lvl -> 15)
        ..presetDurationHero(lvl -> 2.04)
        ..presetDurationNormal(lvl -> 2.04)

public constant MONSTER_CLEAVE_100 = compiletime(ABIL_ID_GEN.next())
@compiletime function genMonsterCleave()
	new AbilityDefinitionPitLordCleavingAttack(MONSTER_CLEAVE_100)
        ..setLevels(1)
        ..setHeroAbility(false)
        ..presetAreaofEffect(lvl -> 400)
        ..presetDistributedDamageFactor(lvl -> 1.0)

public constant GHOST_HOWL_OF_TERROR = compiletime(ABIL_ID_GEN.next())
@compiletime function ghostTerror()
	new AbilityDefinitionPitLordHowlofTerror(GHOST_HOWL_OF_TERROR)
        ..setLevels(1)
        ..setHeroAbility(false)
        ..presetAreaofEffect(lvl -> 500)
        ..presetDamageIncrease(lvl -> .5)
        ..presetCooldown(lvl -> 15)

public constant STATUE_HOWL_OF_TERROR = compiletime(ABIL_ID_GEN.next())
@compiletime function statueTerror()
	new AbilityDefinitionPitLordHowlofTerror(STATUE_HOWL_OF_TERROR)
        ..setLevels(1)
        ..setHeroAbility(false)
        ..presetAreaofEffect(lvl -> 500)
        ..presetDefenseIncrease(lvl -> 10)
        ..presetCooldown(lvl -> 15)
        ..presetManaCost(lvl -> 0)

public constant ABILITY_BLIZZARD_ICEELEMENTAL = compiletime(ABIL_ID_GEN.next())
@compiletime function genBliz()
	new AbilityDefinitionBlizzardcreep(ABILITY_BLIZZARD_ICEELEMENTAL)
        ..setLevels(1)
        ..presetNumberofWaves(lvl -> 3)
        ..presetDamage(lvl -> 300)
        ..presetMaximumDamageperWave(lvl -> 10000)
        ..setButtonPositionNormalX(1)
        ..setButtonPositionNormalY(2)
        ..setButtonPositionResearchX(3)
        ..presetManaCost(lvl -> 75)
        ..presetCooldown(lvl -> 14)

    
public constant GhostLightning = compiletime(ABIL_ID_GEN.next())
@compiletime function gen2()
	new AbilityDefinitionChainLightningcreep(GhostLightning)
		..setLevels(2)
        ..setName("Ghsot Lightning")
        ..presetDamageperTarget(lvl -> (lvl * 100).toReal())
        ..presetDamageReductionperTarget(lvl -> -.25)
        ..presetCooldown(lvl -> 10.)
        ..presetCastingTime(lvl -> 4.5 - (1.5 * lvl))
        ..presetManaCost(lvl -> 100)
        ..setLightningEffects(LIGHTNING_MANA_BURN)
        ..presetNumberofTargetsHit(lvl -> 10)
        ..setButtonPositionNormalX(0)
        ..setButtonPositionNormalY(2)
        ..setButtonPositionResearchX(0)


public constant ghoulJump = compiletime(ABIL_ID_GEN.next())
@compiletime function genGhoulJump()
    new AbilityDefinitionFireBolt(ghoulJump)
        ..setHeroAbility(false)
        ..setLevels(2)
        ..setArtTarget("")
        ..setArtEffect("")
        ..setMissileArt("")
		..setName("No Dmg Firebolt")
        ..presetDamage(lvl -> 0)
        ..presetManaCost(lvl -> 0)
        ..presetCooldown(lvl -> 10.0)
        ..setButtonPositionNormalX(0)
        ..setButtonPositionNormalY(2)
        ..setIconNormal(Icons.bTNImmolationOn)
        ..setIconResearch(Icons.bTNImmolationOn)
        ..presetDurationHero(lvl -> .04)
        ..presetDurationNormal(lvl -> .04)

public constant learnAbility = compiletime(ABIL_ID_GEN.next())
@compiletime function learnAbility()
    new AbilityDefinitionShadowHunterHealingWave(learnAbility)
        ..setLevels(4)
        ..setArtTarget("")
        ..setCheckDependencies(false)
        ..setLightningEffects(LIGHTNING_DRAIN_MANA)
        ..setName("Pick Their Brain")
        ..setTooltipLearn("Learn Pick Their Brain (D)")
        ..setTooltipLearnExtended("Picks the targets brain, learning their (Q) ability. Some side effects may occur to the target.")
        ..presetTooltipNormal(lvl -> "Pick Their Brain (D) - Level " + lvl.toString())
        ..presetTooltipNormalExtended(lvl -> "Picks the targets brain, learning their (Q) ability. Some side effects may occur to the target. Resulting ability will be level " + lvl.toString())
        ..presetDamageperTarget(lvl -> 0)
        ..presetNumberofTargetsHit(lvl -> 1)
        ..presetManaCost(lvl -> 150)
        ..presetCastRange(lvl -> 200)
        ..presetHotkey("D")
        ..presetCooldown(lvl -> 45.0)
        ..presetButtonPosResearch(0, 0)
        ..presetButtonPosNormal(1, 1)
        ..setIconNormal(Icons.bTNLifeDrain)
        ..setIconResearch(Icons.bTNLifeDrain)

public constant skillCoilEffect = compiletime(ABIL_ID_GEN.next())
@compiletime function genSkillCoilEffect()
    new AbilityDefinitionDeathCoilcreep(skillCoilEffect)
        ..setHeroAbility(false)
        ..setLevels(1)
        ..setName("Skill coil effect")
        ..presetAmountHealedDamaged(lvl -> 1000.)
        ..presetManaCost(lvl -> 0)
        ..presetCooldown(lvl -> 0.0)
        ..setButtonPositionNormalX(0)
        ..setButtonPositionNormalY(2)
        ..presetDurationHero(lvl -> 0)
        ..presetDurationNormal(lvl -> 0)

public constant monsterToss = compiletime(ABIL_ID_GEN.next())
@compiletime function genMonsterToss()
    new AbilityDefinitionBloodlustCreep(monsterToss)
        ..setHeroAbility(false)
        ..setLevels(1)
        ..setName("Monster Toss")
        ..presetManaCost(lvl -> 0)
        ..presetCooldown(lvl -> 6.0)
        ..presetTargetsAllowed(lvl -> commaList(TargetsAllowed.ancient))
        ..setButtonPositionNormalX(0)
        ..presetCastRange(lvl -> 125)
        ..setButtonPositionNormalY(2)
        ..presetDurationHero(lvl -> 0.1)
        ..presetDurationNormal(lvl -> 0.1)

public constant murlocSpawn = compiletime(ABIL_ID_GEN.next())
@compiletime function genMurlocSpawn()
    new AbilityDefinitionArchMageSummonWaterElemental(murlocSpawn)
        ..setHeroAbility(false)
        ..setLevels(1)
        ..setName("Spawn Murloc")
        ..presetManaCost(lvl -> 0)
        ..presetCooldown(lvl -> 4.0)
        ..setButtonPositionNormalX(0)
        ..setButtonPositionNormalY(2)
        ..presetSummonedUnitType(lvl -> "")
        ..presetSummonedUnitCount(lvl -> 1)
        ..presetDurationHero(lvl -> 0.1)
        ..presetDurationNormal(lvl -> 0.1)

public constant murlocTidalWave = compiletime(ABIL_ID_GEN.next())
@compiletime function genMurlocWave()
    new AbilityDefinitionArchMageSummonWaterElemental(murlocTidalWave)
        ..setHeroAbility(false)
        ..setLevels(1)
        ..setName("Murloc Tidal Wave")
        ..presetManaCost(lvl -> 0)
        ..presetCooldown(lvl -> 12.0)
        ..setButtonPositionNormalX(0)
        ..setButtonPositionNormalY(2)
        ..presetSummonedUnitType(lvl -> "")
        ..presetSummonedUnitCount(lvl -> 1)
        ..presetDurationHero(lvl -> 0.1)
        ..presetDurationNormal(lvl -> 0.1)

public constant tidalWaveEffect = compiletime(ABIL_ID_GEN.next())
@compiletime function tidalWaveEffect()
    new AbilityDefinitionCrushingWave(tidalWaveEffect)
        ..setHeroAbility(false)
        ..setLevels(1)
        ..setName("Murloc Tidal Wave Effect")
        ..presetManaCost(lvl -> 0)
        ..presetCooldown(lvl -> 1.0)
        ..setButtonPositionNormalX(0)
        ..setButtonPositionNormalY(2)
        ..presetAreaofEffect(lvl -> 150)
        ..presetDistance(lvl -> 3000)
        ..presetFinalArea(lvl -> 150)
        ..presetDamage(lvl -> 1000)
        ..presetMaxDamage(lvl -> 50000)
        ..setMissileSpeed(150)

public constant ABILITY_ICE_DROP_NEUTRAL = compiletime(ABIL_ID_GEN.next())
@compiletime function iceDropN()
    new AbilityDefinitionTinkererClusterRocketsLevel0(ABILITY_ICE_DROP_NEUTRAL)
        ..setHeroAbility(false)
        ..setLevels(1)
        ..setName("Ice Drop")
        ..presetManaCost(lvl -> 100)
        ..presetCooldown(lvl -> 14.0)
        ..setButtonPositionNormalX(0)
        ..setButtonPositionNormalY(2)
        ..presetAreaofEffect(lvl -> 300)
        ..setMissileArt("")
        ..presetDamageInterval(lvl -> 1.49)
        ..presetDamageAmount(lvl -> 0)
        ..presetDurationNormal(lvl -> 0.01)
        ..presetDurationNormal(lvl -> 0.01)
public constant ABILITY_CRAB_JUMP = compiletime(ABIL_ID_GEN.next())
@compiletime function genCrabJump()
    new AbilityDefinitionArchMageSummonWaterElemental(ABILITY_CRAB_JUMP)
        ..setHeroAbility(false)
        ..setLevels(1)
        ..setName("Wolf Blow")
        ..presetManaCost(lvl -> 0)
        ..presetCooldown(lvl -> 25.0)
        ..setButtonPositionNormalX(0)
        ..setButtonPositionNormalY(2)
        ..presetSummonedUnitType(lvl -> "")
        ..presetSummonedUnitCount(lvl -> 1)
        ..presetDurationHero(lvl -> 0.1)
        ..presetDurationNormal(lvl -> 0.1)

public constant ABILITY_GNOLL_EVASION = compiletime(ABIL_ID_GEN.next())
@compiletime function genGnollEvade()
    new AbilityDefinitionEvasioncreep(ABILITY_GNOLL_EVASION)
        ..setHeroAbility(false)
        ..setLevels(1)
        ..setName("Gnoll Evasion")
        ..presetChancetoEvade(lvl -> .70)

public constant ABILITY_DISEASE_CLOUD_VISUAL = compiletime(ABIL_ID_GEN.next())
@compiletime function genDiseaseVisual()
    new AbilityDefinitionAuraPlagueCreep(ABILITY_DISEASE_CLOUD_VISUAL)
        ..setHeroAbility(false)
        ..setLevels(1)
        ..setRequirements("")
        ..presetAuraDuration(lvl -> 1)
public constant ABILITY_WOLF_BLOW = compiletime(ABIL_ID_GEN.next())
@compiletime function genWolfBlow()
    new AbilityDefinitionArchMageSummonWaterElemental(ABILITY_WOLF_BLOW)
        ..setHeroAbility(false)
        ..setLevels(1)
        ..setName("Wolf Blow")
        ..presetManaCost(lvl -> 0)
        ..presetCooldown(lvl -> 12.0)
        ..setButtonPositionNormalX(0)
        ..setButtonPositionNormalY(2)
        ..presetSummonedUnitType(lvl -> "")
        ..presetSummonedUnitCount(lvl -> 1)
        ..presetDurationHero(lvl -> 0.1)
        ..presetDurationNormal(lvl -> 0.1)
public constant ABILITY_WOLF_NIGHTMARE = compiletime(ABIL_ID_GEN.next())
@compiletime function wolfNightmare()
    new AbilityDefinitionFireBoltcreep(ABILITY_WOLF_NIGHTMARE)
        ..setHeroAbility(false)
        ..setLevels(1)
        ..setName("Wolf Nightmare")
        ..setTargetsAllowed(1, TargetsAllowed.hero)
        ..presetManaCost(lvl -> 0)
        ..presetCooldown(lvl -> 45.0) // cooldown is reset when the hero event ends
        ..presetDurationHero(lvl -> 1.04)
        ..presetDurationNormal(lvl -> 1.04)
        ..setButtonPositionNormalX(0)
        ..setButtonPositionNormalY(2)
        ..setMissileArt("")
        ..presetAreaofEffect(lvl -> 0)
        ..presetDamage(lvl -> 0)
        ..setMissileSpeed(10000)
public constant ABILITY_ROBINHOOD_ARROW = compiletime(ABIL_ID_GEN.next())
@compiletime function robinhoodArrow()
    new AbilityDefinitionFireBoltcreep(ABILITY_ROBINHOOD_ARROW)
        ..setHeroAbility(false)
        ..setLevels(1)
        ..setName("Robin Hood Arrow")
        ..presetManaCost(lvl -> 0)
        ..presetCooldown(lvl -> 15.0)
        ..presetDurationHero(lvl -> 0.04)
        ..presetDurationNormal(lvl -> 0.04)
        ..setButtonPositionNormalX(0)
        ..setButtonPositionNormalY(2)
        ..setMissileArt("")
        ..presetAreaofEffect(lvl -> 0)
        ..presetDamage(lvl -> 0)
        ..setMissileSpeed(1000)

public constant ABILITY_RAM = compiletime(ABIL_ID_GEN.next())
@compiletime function ram()
    new AbilityDefinitionFireBoltcreep(ABILITY_RAM)
        ..setHeroAbility(false)
        ..setLevels(1)
        ..setName("Ram")
        ..presetManaCost(lvl -> 0)
        ..presetCooldown(lvl -> 12.0)
        ..presetDurationHero(lvl -> 0.04)
        ..presetDurationNormal(lvl -> 0.04)
        ..setButtonPositionNormalX(0)
        ..setButtonPositionNormalY(2)
        ..setMissileArt("")
        ..presetAreaofEffect(lvl -> 0)
        ..presetDamage(lvl -> 0)
        ..setMissileSpeed(1000)
public constant ABILITY_MAMMOTH_RAISE_DED = compiletime(ABIL_ID_GEN.next())
@compiletime function raiseDedMammoth()
    new AbilityDefinitionRaiseDeadCreep(ABILITY_MAMMOTH_RAISE_DED)
        ..setHeroAbility(false)
        ..setLevels(1)
        ..setName("Raise Mamoth ded")
        ..presetManaCost(lvl -> 0)
        ..presetCooldown(lvl -> 5.0)
        ..presetDurationNormal(lvl -> 120)
        ..setButtonPositionNormalX(0)
        ..setButtonPositionNormalY(2)
        ..presetUnitTypeOne(lvl -> LIL_SKELETON_MAMMOTH.toRawCode())
        ..presetUnitsSummonedTypeOne(lvl -> 1)
public constant bearCyclone = compiletime(ABIL_ID_GEN.next())
@compiletime function genBearCyclone()
    new AbilityDefinitionCyclonecreep(bearCyclone)
        ..setHeroAbility(false)
        ..setLevels(1)
        ..setName("Bear cyclone")
        ..presetManaCost(lvl -> 0)
        ..presetCooldown(lvl -> 12.0)
        ..setButtonPositionNormalX(0)
        ..setButtonPositionNormalY(2)
        ..presetDurationHero(lvl -> 5)
        ..presetDurationNormal(lvl -> 5)
public constant healthBind = compiletime(ABIL_ID_GEN.next())
@compiletime function genHealthBind()
    new AbilityDefinitionSlowCreep(healthBind)
        ..setHeroAbility(false)
        ..setLevels(1)
        ..presetDurationHero(lvl -> lvl * 8.)
        ..presetDurationNormal(lvl -> lvl * 8.)
        ..presetBuffs(lvl -> commaList('B003'))
        ..presetManaCost(lvl -> 50)
        ..presetCooldown(lvl -> 14)
        ..presetCastRange(lvl -> 800)
        ..setButtonPositionNormalX(0)
        ..setButtonPositionNormalY(2)

public constant counterStrike = compiletime(ABIL_ID_GEN.next())
@compiletime function gen3()
    new ChannelAbilityPreset(counterStrike, 5, true)
        ..setHeroAbility(true)
        ..presetTargetTypes(Targettype.NONE) // Set the target type for all levels
        ..presetTooltipNormal(lvl -> "Counter Strike (Q) - Level " + lvl.toString())
        ..presetDurationHero(lvl -> 3.)
        ..presetTooltipNormalExtended(lvl -> "Stand and channel for up to 5 seconds. When cancelled or finished, deal more damage back to the bad guys")
        ..presetCooldown(lvl -> 15)
        ..presetCastRange(lvl -> 9999.)
        ..presetHotkey("Q")
        ..presetButtonPosNormal(0, 2)
        ..presetButtonPosResearch(0, 0)
        ..presetIcon(Icons.bTNEvasion)

public constant telekenesis = compiletime(ABIL_ID_GEN.next())
@compiletime function genTK()
    new ChannelAbilityPreset(telekenesis, 4, true)
        ..setHeroAbility(true)
        ..presetTargetTypes(Targettype.POINT) // Set the target type for all levels
        ..presetOption(Option.TARGETIMAGE, true)
        ..presetAreaofEffect(lvl -> (100 + 100 * lvl).toReal())
        ..presetTooltipNormal(lvl -> "Telekenesis (Z) - Level " + lvl.toString())
        ..presetTooltipNormalExtended(lvl -> "Grabs hold of all units in the target group. Use right click to order units around while they are effected. Lasts " + (2 + lvl * 2).toString() + " seconds.")
        ..presetDurationHero(lvl -> 1.)
        ..setTooltipLearn("Learn Telekenesis (Z)")
        ..setTooltipLearnExtended( "Grabs hold of all units in the target group. Use right click to order units around while they are effected.")
        ..presetCooldown(lvl -> 15)
        ..presetCastRange(lvl -> 600 + (200 * lvl).toReal())
        ..presetHotkey("Z")
		..presetFollowThroughTime(lvl -> (2 + lvl * 2).toReal())
        ..presetManaCost(lvl -> 85)
        ..presetButtonPosNormal(1, 2)
        ..presetButtonPosResearch(1, 0)
        ..presetIcon(Icons.bTNBanish)

public constant SOUL_RAIN = compiletime(ABIL_ID_GEN.next())
@compiletime function genSoulRain()
    new ChannelAbilityPreset(SOUL_RAIN, 3, true)
        ..setHeroAbility(false)
        ..presetTargetTypes(Targettype.POINT) // Set the target type for all levels
        ..presetOption(Option.TARGETIMAGE, true)
        ..presetAreaofEffect(lvl -> (300 + 100 * lvl).toReal())
        ..presetTooltipNormal(lvl -> "Soul Rain (W) - Level " + lvl.toString())
        ..presetTooltipNormalExtended(lvl -> "Calls down a rain of lost souls to damage all enemy units. Damage is based on how many souls the caster (wyrm) has")
        ..presetDurationHero(lvl -> 1.)
        ..presetCooldown(lvl -> 45)
        ..presetCastRange(lvl -> 600 + (200 * lvl).toReal())
        ..presetHotkey("W")
		..presetFollowThroughTime(lvl -> 5.)
        ..presetButtonPosNormal(1, 2)
        ..presetButtonPosResearch(1, 0)
        ..presetIcon(Icons.bTNVoidWalker)

public constant SEDUCE = compiletime(ABIL_ID_GEN.next())
@compiletime function genSeduce()
    new ChannelAbilityPreset(SEDUCE, 4, true)
        ..setHeroAbility(true)
        ..presetTargetTypes(Targettype.POINT) // Set the target type for all levels
        ..presetOption(Option.TARGETIMAGE, true)
        ..presetAreaofEffect(lvl -> (250).toReal())
        ..presetTooltipNormal(lvl -> "Seduce (Q) - Level " + lvl.toString())
        ..presetTooltipNormalExtended(lvl -> "Units in the target region are seduced into fighting for the demoness for up to " + (2 + 2 * lvl).toString() + " seconds.")
        ..presetDurationHero(lvl -> 1.)
        ..setAnimationNames("spell,channel,looping")
        ..setTooltipLearn("Learn Seduce (Q)")
        ..setTooltipLearnExtended( "Units in the target region are seduced into fighting for the demoness while she is channeling")
        ..presetCooldown(lvl -> 25)
        ..presetHotkey("Q")
		..presetFollowThroughTime(lvl -> (2 + lvl * 2).toReal())
        ..presetButtonPosNormal(0, 2)
        ..presetManaCost(lvl -> 110)
        ..presetCastRange(lvl -> 100)
        ..presetButtonPosResearch(0, 0)
        ..presetIcon(Icons.bTNDemoness)

public constant HARVEST_SOULS = compiletime(ABIL_ID_GEN.next())
@compiletime function genHarvestSouls()
    new AbilityDefinitionEvasion(HARVEST_SOULS)
        ..setHeroAbility(false)
        ..presetChancetoEvade(lvl -> 0)
        ..presetTooltipNormal(lvl -> "Soul Harvest")
        ..presetTooltipNormalExtended(lvl -> "This unit harvests the souls from its victims, storing them for later use")
        ..presetButtonPosNormal(0, 1)
        ..presetIcon(Icons.pASBTNImmolation)

public constant DEMON_DASH = compiletime(ABIL_ID_GEN.next())
@compiletime function genDemonDash()
    new ChannelAbilityPreset(DEMON_DASH, 4, true)
        ..setHeroAbility(true)
        ..presetTargetTypes(Targettype.UNIT) // Set the target type for all levels
        ..presetOption(Option.PHYSICALSPELL, true)
        ..presetAreaofEffect(lvl -> (250).toReal())
        ..presetTooltipNormal(lvl ->  "Demon Dash (W) - Level " + lvl.toString())
        ..presetTooltipNormalExtended(lvl -> "Teleport a short distance and attack the target, dealing 50 + " + (lvl * 100).toString() + "% weapon damage. Cooldown resets if the target is killed")
        ..presetDurationHero(lvl -> 1.)
        ..presetManaCost(lvl -> 45)
        ..setAnimationNames("attack,third")
        ..setTooltipLearn("Learn Demon Dash (W)")
        ..setTooltipLearnExtended( "Teleport a short distance and attack the target, dealing weapon damage. Cooldown resets if the target is killed")
        ..presetCooldown(lvl -> 5)
        ..presetHotkey("W")
        ..presetCastRange(lvl -> 300)
		..presetFollowThroughTime(lvl -> 0)
        ..presetButtonPosNormal(1, 2)
        ..presetButtonPosResearch(1, 0)
        ..presetIcon(Icons.bTNVampiricAura)

public constant SUMMON_SOUL_WYRM = compiletime(ABIL_ID_GEN.next())
@compiletime function genSoulWyrm()
    new ChannelAbilityPreset(SUMMON_SOUL_WYRM, 3, true)
        ..setHeroAbility(true)
        ..presetTargetTypes(Targettype.POINT)
        ..presetAreaofEffect(lvl -> (150).toReal())
        ..setRequiredLevel(6)
        ..setLevelSkipRequirement(6)
        ..presetTooltipNormal(lvl ->  "Summon Soul Wyrm (R) - Level " + lvl.toString())
        ..presetTooltipNormalExtended(lvl -> "Summons a powerful Soul Wyrm to do your bidding. Requires 10 Souls to create, and then can be fed more souls to grow it in power")
        ..presetDurationHero(lvl -> 1.)
        ..presetManaCost(lvl -> 150)
        ..setAnimationNames("spell,special")
        ..setTooltipLearn("Learn Summon Soul Wyrm (R)")
        ..setTooltipLearnExtended( "Summons a powerful Soul Wyrm to do your bidding. Requires 10 Souls to create, and then can be fed more souls to grow it in power")
        ..presetCooldown(lvl -> 60)
        ..presetHotkey("R")
        ..presetCastRange(lvl -> 400)
		..presetFollowThroughTime(lvl -> 3)
        ..presetButtonPosNormal(3, 2)
        ..presetButtonPosResearch(3, 0)
        ..presetIcon("ReplaceableTextures\\CommandButtons\\BTNShadowDragon.blp")

public constant CONSUME_SOUL = compiletime(ABIL_ID_GEN.next())
@compiletime function genConsumeSoul()
    new ChannelAbilityPreset(CONSUME_SOUL, 3, true)
        ..setHeroAbility(false)
        ..presetTargetTypes(Targettype.UNIT)
        ..presetAreaofEffect(lvl -> (150).toReal())
        ..presetTooltipNormal(lvl ->  "Consume Souls (Q)")
        ..presetTooltipNormalExtended(lvl -> "Feast on the Mistress's captured souls")
        ..presetDurationHero(lvl -> 1.)
        ..presetManaCost(lvl -> 0)
        ..setAnimationNames("spell,devour")
        ..presetCooldown(lvl -> 0)
        ..presetHotkey("Q")
        ..presetCastRange(lvl -> 600)
		..presetFollowThroughTime(lvl -> 10)
        ..presetButtonPosNormal(0, 2)
        ..presetIcon(Icons.bTNDevourMagic)
        
public constant SOUL_FIRE = compiletime(ABIL_ID_GEN.next())
@compiletime function genSoulFire()
    new ChannelAbilityPreset(SOUL_FIRE, 4, true)
        ..setHeroAbility(true)
        ..presetTargetTypes(Targettype.POINT) // Set the target type for all levels
        ..presetOption(Option.TARGETIMAGE, false)
        ..presetAreaofEffect(lvl -> (100).toReal())
        ..presetTooltipNormal(lvl ->  "Soul Fire (E) - Level " + lvl.toString())
        ..presetTooltipNormalExtended(lvl -> "Release a pillar of soul fire that burns all enemy units in front of the caster in a line. Consumes 1 Soul")
        ..presetDurationHero(lvl -> 1.)
        ..presetManaCost(lvl -> 0)
        ..setAnimationNames("spell")
        ..setTooltipLearn("Learn Soul Fire (E)")
        ..setTooltipLearnExtended( "Release a pillar of soul fire that burns all enemy units in front of the caster in a line. Consumes 1 Soul")
        ..presetCooldown(lvl -> 12)
        ..presetHotkey("E")
        ..presetCastRange(lvl -> 300)
		..presetFollowThroughTime(lvl -> .5)
        ..presetButtonPosNormal(2, 2)
        ..presetButtonPosResearch(2, 0)
        ..presetIcon(Icons.bTNSoulBurn)

public constant ABILITY_CHILD_GUN = compiletime(ABIL_ID_GEN.next())
@compiletime function genChildGun()
    new AbilityDefinitionTinkererClusterRocketsLevel0(ABILITY_CHILD_GUN)
        ..setHeroAbility(true)
        ..presetAreaofEffect(lvl -> (250).toReal())
        ..presetTooltipNormal(lvl ->  "Child Gun (Q) - Level " + lvl.toString())
        ..presetTooltipNormalExtended(lvl -> "Teleport a short distance and attack the target, dealing 50 + " + (lvl * 100).toString() + "% weapon damage. Cooldown resets if the target is killed")
        ..presetManaCost(lvl -> 45)
        ..presetDamageAmount(lvl -> (5 + lvl * 15).toReal())
        ..setMissileArt(Units.villagerKid1)
        ..setTooltipLearn("Learn Child Gun (Q)")
        ..setTooltipLearnExtended( "Teleport a short distance and attack the target, dealing weapon damage. Cooldown resets if the target is killed")
        ..presetCooldown(lvl -> 5)
        ..presetHotkey("Q")
        ..presetCastRange(lvl -> 300)
        ..presetButtonPosNormal(0, 2)
        ..presetButtonPosResearch(0, 0)
        ..presetIcon(Icons.bTNVillagerKid)

public constant ABILITY_TOY_FACTORY = compiletime(ABIL_ID_GEN.next())
@compiletime function genToyFactory()
    new AbilityDefinitionTinkererSummonFactoryLevel0(ABILITY_TOY_FACTORY)
        ..setHeroAbility(true)
        ..presetFactoryUnitID(lvl -> commaList(TOY_FACTORY))
        ..presetSpawnUnitID(lvl -> commaList(TOY_TANK))
        ..presetCastRange(lvl -> 300)
        ..presetButtonPosNormal(1, 2)
        ..presetButtonPosResearch(1, 0)

public constant ABILITY_DR_HOUSE = compiletime(ABIL_ID_GEN.next())
@compiletime function genDrHouse()
    new AbilityDefinitionTinkererClusterRocketsLevel0(ABILITY_DR_HOUSE)
        ..setHeroAbility(true)
        ..presetAreaofEffect(lvl -> (200).toReal())
        ..presetTooltipNormal(lvl ->  "Dr. House (Q) - Level " + lvl.toString())
        ..presetTooltipNormalExtended(lvl -> "Calls in Doctor House to rid the world of evil, which is really a fancy way of saying that this ability throws a house at the target area that stuns targets for 1 second and deals " +  (50 + lvl * 125).toString() + " damage.")
        ..presetManaCost(lvl -> 140)
        ..presetDamageAmount(lvl -> (50 + lvl * 125).toReal())
        ..presetEffectDuration(lvl -> 0.26)
        ..presetMaxDamage(lvl -> 99999999)
        ..presetMissileCount(lvl -> 1)
        ..setMissileArt(Buildings.cityBuildingSmall0_0)
        ..setTooltipLearn("Learn Dr. House (Q)")
        ..setTooltipLearnExtended("Calls in Doctor House to rid the world of evil, which is really a fancy way of saying that this ability throws a house at the target area that stuns targets for 1 second and deals damage.")
        ..presetCooldown(lvl -> 15)
        ..presetHotkey("Q")
        ..presetCastRange(lvl -> 800)
        ..presetButtonPosNormal(0, 2)
        ..presetButtonPosResearch(0, 0)
        ..presetIcon(Icons.bTNGenericHumanBuilding)

public constant ABILITY_TURTLE_HAT = compiletime(ABIL_ID_GEN.next())
@compiletime function genTurtleHat()
    new AbilityDefinitionLichFrostArmor(ABILITY_TURTLE_HAT)
        ..setHeroAbility(true)
        ..presetTooltipNormal(lvl ->  "Turtle Hat (W) - Level " + lvl.toString())
        ..presetTooltipNormalExtended(lvl -> "Give the wearer a stylish turtle hat which protects them from massive damage. Lasts " + (2 + (5 * lvl)).toString() + " seconds")
        ..presetManaCost(lvl -> 65)
        ..presetArmorBonus(lvl -> 1000)
        ..presetArmorDuration(lvl -> (2 + (5 * lvl)).toReal())
        //..presetBuffs(lvl -> Buffs.)
        ..presetDurationHero(lvl -> 0.01)
        ..presetDurationNormal(lvl -> 0.01)
        ..setTooltipLearn("Learn Turtle Hat (W)")
        ..setTooltipLearnExtended("Give the wearer a stylish turtle hat which protects them from massive damage.")
        ..presetCooldown(lvl -> 25)
        ..presetHotkey("W")
        ..presetCastRange(lvl -> 800)
        ..presetButtonPosNormal(0, 2)
        ..presetButtonPosResearch(0, 0)
        ..presetIcon(Icons.bTNGenericHumanBuilding)

public constant sylarWatch = compiletime(ABIL_ID_GEN.next())
@compiletime function genWatch()
    new ChannelAbilityPreset(sylarWatch, 3, true)
        ..setHeroAbility(true)
        ..presetTargetTypes(Targettype.POINT) // Set the target type for all levels
        ..presetOption(Option.TARGETIMAGE, true)
        ..presetAreaofEffect(lvl -> (100 + 100 * lvl).toReal())
        ..presetCooldown(lvl -> 60)
        ..presetTooltipNormal(lvl -> "Tick Tock (R) - Level " + lvl.toString())
        ..presetTooltipNormalExtended(lvl -> "Creates a giant clock out of lightning that hurts enemies")
        ..presetDurationHero(lvl -> 3.)
        ..setTooltipLearn("Learn Tick Tock (R)")
        ..setTooltipLearnExtended( "Creates a giant clock out of lightning that hurts enemies")
        ..presetCooldown(lvl -> 75)
        ..setRequiredLevel(6)
        ..setLevelSkipRequirement(6)
        ..presetCastRange(lvl -> 300)
        ..presetHotkey("R")
        ..presetButtonPosNormal(3, 2)
        ..presetButtonPosResearch(3, 0)
        ..presetIcon(Icons.bTNMonsoon)
public constant ABILITY_DRUID_MORPH = compiletime(ABIL_ID_GEN.next())
@compiletime function genBearForm()
	new AbilityDefinitionDemonHunterMetamorphosis(ABILITY_DRUID_MORPH)
        ..setLevels(1)
        ..setHeroAbility(false)
        ..setLevelSkipRequirement(0)
        ..presetNormalFormUnit(lvl -> DRUID_OF_CLAW.toRawCode())
        ..presetAlternateFormUnit(lvl -> DRUID_OF_CLAW_MORPH.toRawCode())
		..setName("Bear Form")
        ..setButtonPositionNormalX(3)
        ..setMissileArt("")
        ..presetAlternateFormHitPointBonus(lvl -> 300)
        ..presetTooltipNormal(lvl -> "Bear Form (D)")
        ..presetTooltipNormalExtended(lvl -> "Transform into a bear, increasing hitpoints, armor, and changing the effects of your abilities")
        ..setTooltipLearn("Learn Bear Form (D)")
        ..setTooltipLearnExtended("Transform into a bear, increasing hitpoints, armor, and changing the effects of your abilities")
        ..setButtonPositionResearchX(1)
        ..setButtonPositionNormalX(1)
        ..setButtonPositionNormalY(1)
        ..presetHotkey("D")
        ..setIconNormal(Icons.bTNBearForm)
        ..presetManaCost(lvl -> 0)
        ..presetCooldown(lvl -> 10)
        ..setIconResearch(Icons.bTNBearForm)
        ..presetCastingTime(lvl -> 1)
        ..presetDurationHero(lvl -> 0)
        ..presetDurationNormal(lvl -> 1)
public constant ABILITY_DRUID_SWIP = compiletime(ABIL_ID_GEN.next())
@compiletime function genSwipe()
    new ChannelAbilityPreset(ABILITY_DRUID_SWIP, 4, true)
        ..setHeroAbility(true)
        ..presetTargetTypes(Targettype.POINT) // Set the target type for all levels
        ..presetOption(Option.TARGETIMAGE, false)
        ..presetAreaofEffect(lvl -> (100).toReal())
        ..presetTooltipNormal(lvl ->  "Swipe (E) - Level " + lvl.toString())
        ..presetTooltipNormalExtended(lvl -> "Swipes the enemies in front of you. Damage is based on strength in bear form, and intelligence in human form")
        ..presetDurationHero(lvl -> 1.)
        ..presetManaCost(lvl -> 60)
        ..setAnimationNames("attack,spell")
        ..setTooltipLearn("Learn Swipe (E)")
        ..setTooltipLearnExtended(  "Swipes the enemies in front of you. Damage is based on attack damage in bear form, and intelligence in human form")
        ..presetCooldown(lvl -> 5)
        ..presetHotkey("E")
        ..presetCastRange(lvl -> 400)
		..presetFollowThroughTime(lvl -> .5)
        ..presetButtonPosNormal(2, 2)
        ..presetButtonPosResearch(2, 0)
        ..presetIcon(Icons.bTNBearBlink)

public constant ABILITY_HEFFALUMPS = compiletime(ABIL_ID_GEN.next())
@compiletime function genHeffalumps()
    new ChannelAbilityPreset(ABILITY_HEFFALUMPS, 3, true)
        ..setHeroAbility(true)
        ..presetTargetTypes(Targettype.NONE) // Set the target type for all levels
        ..presetOption(Option.TARGETIMAGE, false)
        ..presetTooltipNormal(lvl -> "Heffalump Haunt (R) - Level " + lvl.toString())
        ..presetTooltipNormalExtended(lvl -> "Calls upon terrifying spirits to haunt the world around you, hurting your enemies and occassionally your friends. Lasts 8 seconds")
        ..presetDurationHero(lvl -> 1.)
        ..setTooltipLearn("Learn Heffalump Haunt (R)")
        ..setTooltipLearnExtended(  "Calls upon terrifying spirits to haunt the world around you, hurting your enemies and occassionally your friends. Lasts 8 seconds")
        ..presetCooldown(lvl -> 75)
        ..presetHotkey("R")
		..presetFollowThroughTime(lvl -> (8).toReal())
        ..presetManaCost(lvl -> 125)
        ..setRequiredLevel(6)
        ..setLevelSkipRequirement(6)
        ..presetButtonPosNormal(3, 2)
        ..presetButtonPosResearch(3, 0)
        ..presetIcon(Icons.bTNBanish)
public constant ABILITY_BEAR_BRILLIANCE = compiletime(ABIL_ID_GEN.next())
@compiletime function genBearBrilliance()
    new AbilityDefinitionAuraBrilliancecreep(ABILITY_BEAR_BRILLIANCE)
        ..setHeroAbility(false)
        ..presetAreaofEffect(lvl -> (500).toReal())
        ..presetButtonPosNormal(2, 1)
public constant ABILITY_BEAR_ENUDRANCE = compiletime(ABIL_ID_GEN.next())
@compiletime function genBearEndurance()
    new AbilityDefinitionAuraEnduranceCreep(ABILITY_BEAR_ENUDRANCE)
        ..setHeroAbility(false)
        ..presetAreaofEffect(lvl -> (500).toReal())
        ..presetButtonPosNormal(2, 1)
public constant ABILITY_BEAR_BRAWLER = compiletime(ABIL_ID_GEN.next())
@compiletime function genBearBrawler()
    new AbilityDefinitionBrewmasterDrunkenBrawler(ABILITY_BEAR_BRAWLER)
        ..setHeroAbility(false)
        ..presetChancetoCriticalStrike(lvl -> 15)
        ..presetChancetoEvade(lvl -> .15)
        ..presetDamageMultiplier(lvl -> 2)
        ..presetTooltipNormal(lvl -> "Bear Brawler")
        ..presetTooltipNormalExtended(lvl -> "Gives a 15% chance to evade enemy attacks, and a 15% chance to do 100% more damage when attacking")
        ..presetButtonPosNormal(2, 1)
public constant ABILITY_BEAR_REGEN = compiletime(ABIL_ID_GEN.next())
@compiletime function bearRegen()
    new AbilityDefinitionRejuvination(ABILITY_BEAR_REGEN)
        ..setLevels(4)
        ..setHeroAbility(true)
        ..setTooltipLearn("Learn Rejuvination (Q)")
        ..setRequirements("")
        ..setRequiredLevel(1)
        ..presetIcon(Icons.bTNRejuvenation)
        ..setTooltipLearnExtended("Regenerates health over time for the target friendly unit. Damage will not interrupt this effect. Cannot be used in Bear Form")
        ..presetTooltipNormal(lvl -> "Rejuvination (Q) - Level " + lvl.toString())
        ..presetTooltipNormalExtended(lvl -> "Regenerates " + (100 + lvl * 250).toString() + " hitpoints over time for the target friendly unit. Damage will not interrupt this effect")
        ..presetHotkey("Q")
        ..presetManaCost(lvl -> 65 + (lvl * 10))
        ..presetCastRange(lvl -> 700)
        ..presetHitPointsGained(lvl -> (100 + lvl * 250).toReal())
        ..presetCooldown(lvl -> 4)
        ..presetDurationHero(lvl -> 12)
        ..presetDurationNormal(lvl -> 12)
        ..presetButtonPosNormal(0, 2)
        ..presetButtonPosResearch(0, 0)

public constant ABILITY_BEAR_THUNDERCLAP = compiletime(ABIL_ID_GEN.next())
@compiletime function bearClap()
    new AbilityDefinitionMountainKingThunderClap(ABILITY_BEAR_THUNDERCLAP)
        ..setLevels(4)
        ..setHeroAbility(true)
        ..setTooltipLearn("Learn Bear Thunderclap (W)")
        ..setRequiredLevel(1)
        ..setTooltipLearnExtended("Deals damage and slows, and knocks back enemy units. If used in Bear form, enemies are pulled in instead of out")
        ..presetTooltipNormal(lvl -> "Bear Thunderclap (W) - Level " + lvl.toString())
        ..presetTooltipNormalExtended(lvl -> "Deals " + (lvl * 80).toString() + " damage and slows, and knocks back enemy units. If used in Bear form, enemies are pulled in instead of out")
        ..presetHotkey("W")
        ..presetManaCost(lvl -> 65 + (lvl * 10))
        ..presetCooldown(lvl -> 12)
        ..presetAOEDamage(lvl -> 80.0 * lvl)
        ..presetDurationHero(lvl -> 6)
        ..presetDurationNormal(lvl -> 6)
        ..presetAreaofEffect(lvl -> 300)
        ..presetMovementSpeedReduction(lvl -> .2 + lvl * .1)
        ..presetAttackSpeedReduction(lvl -> lvl * .10)
        ..presetButtonPosNormal(1, 2)
        ..presetButtonPosResearch(1, 0)

public constant ABILITY_FACE_SMASH = compiletime(ABIL_ID_GEN.next())
@compiletime function faceSmash()
    let def = new AbilityDefinitionMountainKingThunderBolt(ABILITY_FACE_SMASH)
        ..setLevels(4)
        ..setAnimationNames("attack")
        ..setHeroAbility(true)
        ..setTooltipLearn("Learn Holy Face Smash (Q)")
        ..setTooltipLearnExtended("Uses the holy power of the gods (your hammer) to smash the face of the target enemy, knocking them back")
        ..presetTooltipNormal(lvl -> "Holy Face Smash (Q) - Level " + lvl.toString())
        ..presetTooltipNormalExtended(lvl -> "Uses the holy power of the gods (your hammer) to smash the face of the target enemy, knocking them back")
        ..presetManaCost(lvl -> 65 + (lvl * 10))
        ..presetCooldown(lvl -> 7)
        ..presetDamage(lvl -> 0)
        ..presetDurationHero(lvl -> 2)
        ..presetDurationNormal(lvl -> 3)
        ..presetCastRange(lvl -> 125)
        ..setMissileArt("")
    setupAbilityDefinitionForPosition(def, 0)
public constant ABILITY_DYNAMITE_PUNCH = compiletime(ABIL_ID_GEN.next())
@compiletime function dynamitePunch()
    let def = new AbilityDefinitionBladeMasterCriticalStrike(ABILITY_DYNAMITE_PUNCH)
        ..setLevels(4)
        ..setHeroAbility(true)
        ..setTooltipLearn("Learn Dynamite Punch (E)")
        ..setTooltipLearnExtended("Causes every third attack to be a dynamite punch, which deals massive damage. If a dynamite punch kills a target, they explode and damage nearby enemies")
        ..presetTooltipNormal(lvl -> "Dynamite Punch - Level " + lvl.toString())
        ..presetTooltipNormalExtended(lvl -> "Causes every fourth attack to be a dynamite punch, which deals massive damage. If a dynamite punch kills a target, they explode and damage nearby enemies")
        ..presetIcon(Icons.pASBTNImmolation)
        ..presetChancetoCriticalStrike(lvl -> 0)
    setupAbilityDefinitionForPosition(def, 2)

public constant ABILITY_JAB_CITY = compiletime(ABIL_ID_GEN.next())
@compiletime function jabCity()
    let def = new ChannelAbilityPreset((ABILITY_JAB_CITY, 4, true)
        ..setLevels(4)
        ..setHeroAbility(true)
        ..setTooltipLearn("Learn Dynamite Punch (E)")
        ..setTooltipLearnExtended("Causes every third attack to be a dynamite punch, which deals massive damage. If a dynamite punch kills a target, they explode and damage nearby enemies")
        ..presetTooltipNormal(lvl -> "Dynamite Punch - Level " + lvl.toString())
        ..presetTooltipNormalExtended(lvl -> "Causes every fourth attack to be a dynamite punch, which deals massive damage. If a dynamite punch kills a target, they explode and damage nearby enemies")
        ..presetIcon(Icons.pASBTNImmolation)
        ..presetChancetoCriticalStrike(lvl -> 0)
    setupAbilityDefinitionForPosition(def, 2)

public constant ABILITY_GET_BACK_UP = compiletime(ABIL_ID_GEN.next())
@compiletime function getBackup()
    let def = new AbilityDefinitionBladeMasterCriticalStrike(ABILITY_GET_BACK_UP)
        ..setLevels(4)
        ..setHeroAbility(false)
        ..setTooltipLearn("Learn Get Back Up (W)")
        ..setTooltipLearnExtended("Gives mike a percent chance to get back up after dying")
        ..presetTooltipNormal(lvl -> "I get knocked down, but I get up again.")
        ..presetTooltipNormalExtended(lvl -> "Gives Mike a 50% percent chance to get back up after dying")
        ..presetIcon(Icons.pASBTNBattleRoar)
        ..presetButtonPosNormal(1, 1)
        ..presetChancetoCriticalStrike(lvl -> 0)
    setupAbilityDefinitionForPosition(def, 1)
public constant BUFF_RAIN_OF_LIGHT_TARGET = compiletime(BUFF_ID_GEN.next())
@compiletime function rainofLightEffect()
    new BuffDefinition(BUFF_RAIN_OF_LIGHT_TARGET, 'AEsd')
        ..setArtTarget(1, Abilities.holyBoltSpecialArt)

public constant BUFF_RAIN_OF_LIGHT_CASTER = compiletime(BUFF_ID_GEN.next())
@compiletime function rainofLightCaster()
    new BuffDefinition(BUFF_RAIN_OF_LIGHT_CASTER, 'XEsf')
        ..setEffect(1, Abilities.resurrectcaster)

public constant ABILITY_RAIN_OF_LIGHT = compiletime(ABIL_ID_GEN.next())
@compiletime function rainOfLight()
    new AbilityDefinitionMoonPriestessStarfall(ABILITY_RAIN_OF_LIGHT)
        ..setLevels(3)
        ..presetIcon(Icons.bTNResurrection)
        ..setRequiredLevel(6)
        ..setLevelSkipRequirement(6)
        ..setArtCaster(Abilities.resurrectcaster)
        ..setHeroAbility(true)
        ..setTooltipLearn("Learn Rain of Light (R)")
        ..setTooltipLearnExtended("Calls down a rain of evil holy energy to hurt the bad guys")
        ..presetTooltipNormal(lvl -> "Rain Of Light (R) - Level " + lvl.toString())
        ..presetTooltipNormalExtended(lvl -> "Calls down a rain of evil holy energy to hurt the bad guys for 25 seconds. ")
        ..presetManaCost(lvl -> 120)
        ..presetHotkey("R")
        ..presetCooldown(lvl -> 100)
        ..presetDamageDealt(lvl -> 70.0 * lvl)
        ..presetDurationHero(lvl -> 25)
        ..presetDurationNormal(lvl -> 25)
        ..presetBuffs(lvl -> commaList(BUFF_RAIN_OF_LIGHT_TARGET))
        // ..presetEffects(lvl -> commaList(BUFF_RAIN_OF_LIGHT_CASTER)) // TODO: Should use this effect, but couldnt get it to work so I just hijacked the built in SF effect



public constant ABILITY_WWUD = compiletime(ABIL_ID_GEN.next())
@compiletime function abilwwud()
    let def = new ChannelAbilityPreset(ABILITY_WWUD, 4, true)
        ..setLevels(4)
        ..setHeroAbility(true)
        ..presetTargetTypes(Targettype.UNIT)
        ..presetTargetsAllowed(lvl -> commaList(TargetsAllowed.allies, TargetsAllowed.self))
        ..setTooltipLearn("Learn WWUD (What Would Uther Do) (W)")
        ..setTooltipLearnExtended("Blesses the target friendly unit. For the next 5 seconds, any damage dealt by uther will heal the friendly target")
        ..presetTooltipNormal(lvl -> "WWUD (W) - Level " + lvl.toString())
        ..presetTooltipNormalExtended(lvl -> "Blesses the target friendly unit. For the next 5 seconds, any damage dealt by uther will heal the friendly target for " + (50 + lvl * 50).toString() + " % of damage dealt. |cffa200ffDealing 250 damage will refresh the duration, up to a maximum of 45 seconds|r")
        ..presetManaCost(lvl -> 50 + (lvl * 15))
        ..presetIcon(Icons.bTNHealingWave)
        ..presetCooldown(lvl -> 12)
        ..presetDurationHero(lvl -> 0)
        ..presetCastRange(lvl -> 700)
        ..presetDurationNormal(lvl -> 0)
        ..presetCastingTime(lvl -> .50)
    setupAbilityDefinitionForPosition(def, 1)

public constant ABILITY_PALADOUT_AURA = compiletime(ABIL_ID_GEN.next())
@compiletime function paladAura()
    let def = new ChannelAbilityPreset(ABILITY_PALADOUT_AURA, 4, true)
        ..setLevels(4)
        ..setHeroAbility(true)
        ..presetTargetTypes(Targettype.NONE)
        ..setTooltipLearn("Learn Auras (E)")
        ..presetIcon(Icons.bTNDevotion)
        ..setTooltipLearnExtended("Allows you to switch between 3 different auras at any time. \nDevotion Aura -- Grants armor\nEndurance Aura -- Grants movement speed\nThorns Aura -- Damages attackers")
        ..presetTooltipNormal(lvl -> "Switch Aura (E) - Level " + lvl.toString())
        ..presetTooltipNormalExtended(lvl -> "Activate to switch to Endurance Aura")
        ..presetManaCost(lvl -> 0)
        ..presetCooldown(lvl -> 1)
        ..presetDurationHero(lvl -> 0)
        ..presetDurationNormal(lvl -> 0)
        ..presetCastingTime(lvl -> 0)
    setupAbilityDefinitionForPosition(def, 2)

public constant ABILITY_SUMMON_WHIRLPOOL = compiletime(ABIL_ID_GEN.next())
@compiletime function whirlpool()
    new AbilityDefinitionHealingWardcreep(ABILITY_SUMMON_WHIRLPOOL)
        ..setLevels(1)
        ..presetManaCost(lvl -> 100)
        ..presetDurationNormal(lvl -> 20)
        ..presetCooldown(lvl -> 20) 
        ..presetWardUnitType(lvl -> commaList(WHIRL_POOL))
            

public constant ABILITY_PALADOUT_DEVOTION = compiletime(ABIL_ID_GEN.next())
@compiletime function paladAura0()
    let def = new AbilityDefinitionAuraDevotionCreep(ABILITY_PALADOUT_DEVOTION)
        ..presetArmorBonus(lvl -> (lvl * 2).toReal())
    setupPallyAura(def, "Devotion Aura", "Grants armor to nearby friendly units")

public constant ABILITY_PALADOUT_SPIDY_AURA = compiletime(ABIL_ID_GEN.next())
@compiletime function paladoutspidy()
    new AbilityDefinitionAuraDevotionCreep(ABILITY_PALADOUT_SPIDY_AURA)
        ..presetButtonPosNormal(2, 2)
        ..presetIcon(Icons.bTNSpider)
        ..presetButtonPosResearch(2, 0)
        ..presetArmorBonus(lvl -> 0)
        ..setRequiredLevel(1)
        ..setTooltipLearn("Learn Spidey Aura")
        ..setTooltipLearnExtended( "When an enemy unit attacks an ally, grants a percent chance that spider-man will web that enemy")
        ..presetTooltipNormal(lvl -> "Spidey Aura - Level " + lvl.toString())
        ..presetTooltipNormalExtended(lvl -> "When an enemy unit attacks an ally, grants a percent chance that spider-man will web that enemy")
        ..setHeroAbility(true)
        ..setLevels(4)
public constant ABILITY_SPIDY_WEB_EFFECT = compiletime(ABIL_ID_GEN.next())
@compiletime function webSpidyEf()
    new AbilityDefinitionEnsnareCreep(ABILITY_SPIDY_WEB_EFFECT)
        ..setLevels(1)
        ..presetCooldown(lvl -> 0)
        ..setMissileArt(Abilities.webmissile)
        ..presetBuffs(lvl -> "Bweb,Bwea")
        ..setTargetsAllowed(1, "ground,air")
        ..presetDurationHero(lvl -> 2)
        ..presetDurationNormal(lvl -> 4)

public constant ABILITY_PALADOUT_ENDURANCE = compiletime(ABIL_ID_GEN.next())
@compiletime function paladAura1()
    let def = new AbilityDefinitionAuraEnduranceCreep(ABILITY_PALADOUT_ENDURANCE)
        ..presetMovementSpeedIncrease(lvl -> .10 * lvl)
        ..presetAttackSpeedIncrease(lvl -> .05 * lvl)
        ..presetButtonPosNormal(2, 1)
        ..presetTooltipNormal(lvl -> "Endurance Aura lvl - " + lvl.toString())
        ..presetTooltipNormalExtended(lvl -> "go fast")
        ..setHeroAbility(false)
        ..setLevels(4)
    setupPallyAura(def, "Endurance Aura", "Grants movement and attack speed to nearby friendly units")

public constant ABILITY_PALADOUT_THORNS = compiletime(ABIL_ID_GEN.next())
@compiletime function paladAura2()
    let def = new AbilityDefinitionKeeperoftheGroveThornsAura(ABILITY_PALADOUT_THORNS)
        ..presetDamageDealttoAttackers(lvl -> .10 * lvl)
    setupPallyAura(def, "Thorns Aura", "Damages attackers")


function setupPallyAura(AbilityDefinition def, string ttNorm, string ttEx)
    def..presetAreaofEffect(lvl -> 700)
        ..presetButtonPosNormal(2, 1)
        ..presetTooltipNormal(lvl -> ttNorm + " - Level " + lvl.toString())
        ..presetTooltipNormalExtended(lvl -> ttEx)
        ..setHeroAbility(false)
        ..setLevels(4)

public constant sylarFrostNova = compiletime(ABIL_ID_GEN.next())
@compiletime function sylarFrostNova()
    new AbilityDefinitionLichFrostNova(sylarFrostNova)
        ..setLevels(4)
        ..presetAreaofEffectDamage(lvl -> (lvl * 75).toReal())
        ..presetAreaofEffect(lvl -> 200.)
        ..setTooltipLearn("Learn Frost Nova (X)")
        ..setTooltipLearnExtended("It's just frost nova. Those other spells took so long to write triggers for I had to cut corners somewhere. But hey, it does damage. And Sylar did have frost powers in the show so it's canon. Also this ability does do an additional bit of damage to the target based off of your intelligence")
        ..presetTooltipNormal(lvl -> "Frost Nova (X) - Level " + lvl.toString())
        ..presetTooltipNormalExtended(lvl -> "It's just frost nova. Those other spells took so long to write triggers for I had to cut corners somewhere. But hey, it does damage. And Sylar did have frost powers in the show so it's canon")
        ..presetHotkey("X")
        ..presetSpecificTargetDamage(lvl -> 0)
        ..presetManaCost(lvl -> 100)
        ..presetCooldown(lvl -> (8 - lvl).toReal())
        ..presetButtonPosNormal(2, 2)
        ..presetButtonPosResearch(2, 0)

public constant sylarLearnAbility0 = compiletime(ABIL_ID_GEN.next())
public constant sylarLearnAbility1 = compiletime(ABIL_ID_GEN.next())
public constant sylarLearnAbility2 = compiletime(ABIL_ID_GEN.next())
@compiletime function genSylar()
    genS(sylarLearnAbility0)
    genS(sylarLearnAbility1)
    genS(sylarLearnAbility2)
function genS(int id)
    new ChannelAbilityPreset(id, 1, true)
        ..makeUnitSpell(0, 60)
        ..presetTargetTypes(Targettype.NONE) // Set the target type for all levels
        ..presetTooltipNormal(lvl -> "Counter Strike (Q) - Level " + lvl.toString())
        ..presetDurationHero(lvl -> 0.1)
        ..presetTooltipNormalExtended(lvl -> "Stand and channel for up to 5 seconds. When cancelled or finished, deal more damage back to the bad guys")
        ..presetHotkey("Q")
        ..presetButtonPosNormal(0, 2)
        ..presetButtonPosResearch(0, 0)
        ..presetIcon(Icons.bTNEvasion)

// Just a marker ability that we give to monsters when we spawn them. This way any
// ressurected or summoned monsters do not give loot
public constant ABILITY_GIVES_LOOT = compiletime(ABIL_ID_GEN.next())
@compiletime function genGivesLoot()
    new ChannelAbilityPreset(ABILITY_GIVES_LOOT, 1, true)
        ..setHeroAbility(false)
        ..presetTargetTypes(Targettype.NONE) // Set the target type for all levels
        ..presetOption(Option.TARGETIMAGE, false)
        ..presetBaseOrderID(lvl -> "")
        ..presetOption(Option.VISIBLE, false)

// Boss monster marker
// ressurected or summoned monsters do not give loot
public constant ABILITY_GIVES_BOSS_LOOT = compiletime(ABIL_ID_GEN.next())
@compiletime function genGivesBossLoot()
    new ChannelAbilityPreset(ABILITY_GIVES_BOSS_LOOT, 10, true)
        ..setHeroAbility(false)
        ..presetTargetTypes(Targettype.NONE) // Set the target type for all levels
        ..presetOption(Option.TARGETIMAGE, false)
        ..presetBaseOrderID(lvl -> "")
        ..presetOption(Option.VISIBLE, false)

public constant ABILITY_COIL_LEVEL = compiletime(ABIL_ID_GEN.next())
@compiletime function genCoilLvl()
    new ChannelAbilityPreset(ABILITY_COIL_LEVEL, 10, true)
        ..setHeroAbility(false)
        ..presetTargetTypes(Targettype.NONE) // Set the target type for all levels
        ..presetOption(Option.TARGETIMAGE, false)
        ..presetBaseOrderID(lvl -> "")
        ..presetOption(Option.VISIBLE, false)
public function createAttackBonusAbility(int dmg) returns int
    int id = ABIL_ID_GEN.next()
    new AbilityDefinitionAttackBonusAIt9(id)
        .setAttackBonus(1, dmg)
    return id
public function createArmorBonusAbility(int amt) returns int
    int id = ABIL_ID_GEN.next()
    new AbilityDefinitionDefenseBonusPlus1(id)
        ..setDefenseBonus(1, amt)
    return id

public function createStatBonusAbility(int intel, int str, int agil) returns int
    int id = ABIL_ID_GEN.next()
    AbilityDefinitionIntelligenceBonusPlus1 def = new AbilityDefinitionIntelligenceBonusPlus1(id)
    def.setIntelligenceBonus(1, intel)
    if(str > 0)
        def.setStrengthBonus(1, str)
    if(agil > 0)
        def.setAgilityBonus(1, agil)
    return id




function setupAbilityDefinitionForPosition(AbilityDefinition def, int pos)
    switch(pos)
        case 0
            def.presetHotkey("Q")
            def.presetButtonPosNormal(0, 2)
            def.presetButtonPosResearch(0, 0)
            def.presetButtonPosTurnOff(0, 2)
            def.setRequiredLevel(1)
            def.setLevelSkipRequirement(0)
        case 1
            def.presetHotkey("W")
            def.presetButtonPosNormal(1, 2)
            def.presetButtonPosResearch(1, 0)
            def.presetButtonPosTurnOff(1, 2)
            def.setRequiredLevel(1)
            def.setLevelSkipRequirement(0)
        case 2
            def.presetHotkey("E")
            def.presetButtonPosNormal(2, 2)
            def.presetButtonPosResearch(2, 0)
            def.presetButtonPosTurnOff(2, 2)
            def.setRequiredLevel(1)
            def.setLevelSkipRequirement(0)
        case 3
            def.presetHotkey("R")
            def.presetButtonPosNormal(3, 2)
            def.presetButtonPosResearch(3, 0)
            def.presetButtonPosTurnOff(3, 2)
            def.setRequiredLevel(6)
            def.setLevelSkipRequirement(6)