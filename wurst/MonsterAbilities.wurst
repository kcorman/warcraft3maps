package MonsterAbilities
import ClosureEvents
import CustomAbilities
import GameTimer
import ClosureTimers
import TimerUtils
import ClosureForGroups
import TerrainUtils
import Vectors
import Effect
import Assets
import BasicAI
import CustomSummonedUnits
import OrderIds
import HashSet
import MonsterAI
import Lightning
import DummyCaster
import MissleEffects
import SoundUtils
import Knockback3
import LinkedList
import HashList
import CustomUnitIds
import HashMap
import PTQConstants
import CustomUnits
constant int MURLOC_HEAD = 'n00O'
constant int MEAT_WAGON = 'umtw'
constant int ABILITY_CYCLOPS_BEAM = 'A01S'
constant int MAX_COILS = 50
constant int ABILITY_SET_TARGET_WAY_GATE = 'A01T'
constant SoundDefinition boneCrack = new SoundDefinition(Sounds.skeletonWhat1, false, true)
constant SoundDefinition SOUND_MAMMOTH_CHARGE_HIT = new SoundDefinition(Sounds.rockHeavyBashFlesh2, false)
constant SoundDefinition SOUND_MAMMOTH_CHARGE_WINDUP = new SoundDefinition(Sounds.mammothYes1, false)
constant SoundDefinition ATTACK_THE_CRAB = new SoundDefinition("MassiveDamage.mp3", false)
constant SoundDefinition HERES_A_CRAB = new SoundDefinition("HeresGiantEnemyCrab.mp3", false)
public AddMonsterToWaveCb addMonsterToWave = null

interface HealthChangeCallback
    function run(real diff, boolean last) returns boolean
interface AddMonsterToWaveCb
    function am(unit monster)

LinkedList<CoilTracker> coilList = new LinkedList<CoilTracker>
class CoilTracker
    int level = 1
    unit coil
    unit caster
    lightning light

class RealWrapper
    real val = 0

function adjustUnitStats(unit u) returns unit
    let diffAdjust = (1 + (difficultyMultplier - 1) * .2) // difficulty 1 means 100% hp, difficulty 2 means 120% hp, etc.
    u.setMaxHP((u.getMaxHP() * diffAdjust).toInt())
    u.setHP(u.getMaxHP())
    u.setBaseDamage((u.getBaseDamage(0) * diffAdjust).toInt(), 0)
    u.setBaseDamage((u.getBaseDamage(1) * diffAdjust).toInt(), 1)
    return u
public function monsterCreated(unit monster)
    adjustUnitStats(monster)
    // This adds the monster to the current wave. Kinda a weird tightly coupled thing
    addMonsterToWave.am(monster)
    switch(monster.getTypeId())
        case COIL_HYDRA
            monster.setVertexColor(150, 230, 150, 30)
            for i = 0 to 1
                createHydraCoil(monster, 1)
        case CRYPT_FREND
            addAI(new CryptFrendAI(monster))
        case DETH_NIGHT
            addAI(new DethNightAI(monster))
        case UNSTOPPABLE_TANK
            handleUnstoppableTank(monster)
        case LEE_HARVEY
            addAI(new HarveyAI(monster))
        case GIANT_ENEMY_CRAB
            HERES_A_CRAB.play()
            addAI(new CrabAI(monster))
        case MURLOC_HEAD
            //PTQUtils.enableFlyingForUnit(monster)
            monster.setAnimation("Walk Swim")
            // TODO: Doesnt work right
            monster.pause()
            effect e = addEffect(Buildings.barrelsUnit, monster, "origin")
            e.setScale(1.5)
            getTimer().doAfter(5) () ->
                monster.unpause()
                e.destr()
                if(monster.isAliveTrick())
                    monsterCreated(ReplaceUnitBJ(monster, MURLOC_BARBATUS, bj_UNIT_STATE_METHOD_DEFAULTS))
        case AERO_BEAR
            addAI(new AeroBearAI(monster))
        case POOR_SKELETON
            addAI(new PoorSkeletonAI(monster))
        default
            // do nothing
/*
class BallTracker
    effect u
    real radius = 0
    unit z
    timer t
    function doStart()
        PTQUtils.enableFlyingForUnit(z)
        radius = 50
        z.setFlyHeight(radius + 100, 0)
        
    function doTick()
        let t = getElapsedGameTime()
        let rotationAroundZ = t * PI2
        let backAndForth = rotationAroundZ.cos() * 2 - 1
        let upAndDown = rotationAroundZ.sin() * 2 - 1
        let start = z.getPos()
        u.setPos(start.polarOffset(z.getFacingAngle(), backAndForth * radius).withRealZ(z))
        u.setZ(z.getPos3Real().z + upAndDown * radius)
        u.setPitch(rotationAroundZ)

function startBall(unit monster)
    BallTracker trk = new BallTracker()
    trk.z = monster
    trk.u = addEffect(Units.murloc1, trk.z.getPos3Real())
    timer t = getTimer()..doPeriodically(.05) (CallbackPeriodic cb) ->
        trk.doTick()
    trk.t = t
    trk.doStart()*/
timer coilTimer = null
public function createHydraCoil(unit caster, int lvl)
    unit u = CreateUnit(caster.getOwner(), COIL_UNIT, caster.getX(), caster.getY(), caster.getFacing())
    u.addAbility(ABILITY_COIL_LEVEL)
    u.setAbilityLevel(ABILITY_COIL_LEVEL, lvl < 10 ? lvl : 10)
    CoilTracker tracker = new CoilTracker()
    tracker.coil = u
    tracker.caster = caster
    tracker.light = addLightning(LIGHTNING_CHAIN_LIGHTNING_PRIMARY, false, caster.getPos3with(1000), u.getPos3with(1000))
    let bodyColor = colorA(255, 255 - (lvl * 20), 255 - (lvl * 20), 255)
    let size = 1.1 + (lvl * .1)
    let lightColor = colorA(25 + lvl * 10, 180 - (lvl * 15), 69, 255)
    u.setVertexColor(bodyColor)
    u.setScale(size)
    u.setHP(u.getHP() * lvl)
    u.setBaseDamage(u.getBaseDamage(0) + lvl * 15, 0)
    tracker.light.setColor(lightColor)
    coilList.add(tracker)
    if(coilTimer == null)
        startCoilTimer()


public function startCoilTimer()
    coilTimer = getTimer()
    coilTimer.doPeriodically(.10) (CallbackPeriodic cb) ->
        LLIterator<CoilTracker> itr = coilList.iterator()
        while(itr.hasNext())
            let trk = itr.next()
            if(not trk.caster.isAliveTrick())
                trk.coil.kill()
                destroy itr.remove()
                trk.light.destr()
            else if(trk.coil.isAliveTrick())
                trk.light.move(false, trk.caster.getPos3with(700), trk.coil.getPos3with(700))
                if(trk.coil.getPos().distanceTo(trk.caster.getPos()) > 500)
                    trk.coil.issuePointOrder("attack", trk.caster.getPos())
            else
                let prev = trk.coil
                let lvl = prev.getAbilityLevel(ABILITY_COIL_LEVEL)
                trk.light.destr()
                destroy itr.remove()
                if(coilList.size() < MAX_COILS)
                    createHydraCoil(trk.caster, lvl + 1)
                    createHydraCoil(trk.caster, lvl + 1)
        destroy itr



LinkedList<unit> unstoppableTanks = new LinkedList<unit>
timer tankTickTimer = getTimer()

function handleUnstoppableTank(unit tankMonster)
    unstoppableTanks.add(tankMonster)
    if(unstoppableTanks.size() == 1)
        tankTickTimer.doPeriodically(0.1) (CallbackPeriodic cb) ->
            if(unstoppableTanks.isEmpty())
                tankTickTimer.pause()
            else
                LLIterator<unit> tankItr = unstoppableTanks.iterator()
                while(tankItr.hasNext())
                    unit tank = tankItr.next()
                    if(not tank.isAliveTrick())
                        tankItr.remove()
                    else
                        vec2 translate = tank.getPos() + tank.getFacingAngle().direction(250)
                        group g = GetUnitsInRangeOfLocAll(150, PTQUtils.vec2ToLoc(translate))
                        g.forEachFrom() (unit u) ->
                            if(u != tank and not u.isInvulnerable())
                                u.explode()
                        g.destr()
                destroy tankItr

HashSet<unit> unitsOnFire = new HashSet<unit>()

function doCrabJump(unit caster, group targets)
    if(targets.isEmpty())
        targets.destr()
    else
        let tg = targets.next()
        caster.attemptJumpToTarget(tg, caster.getPos().distanceTo(tg.getPos()), 500.0) (boolean hitTarget) ->
            if(hitTarget)
                caster.damageTarget(tg, 800)
                doCrabJump(caster, targets)
                if(gg_snd_WoodHeavyBashWood1.isPlaying())
                    gg_snd_WoodHeavyBashWood1.stop(false, false)
                PlaySoundAtPointBJ(gg_snd_WoodHeavyBashWood1, 100, PTQUtils.vec2ToLoc(caster.getPos()), 0)
            else
                caster.pauseEx()
                caster.setVertexColor(colorA(255, 255, 255, 0))
                let ef = addEffect(Units.spiderCrab, caster.getPos3Real() + vec3(0,0,-150))
                ef.setScale(4)
                let ct = 8
                doPeriodicallyCounted(.04, ct) (CallbackCounted cb) ->
                    if(cb.isLast())
                        ef.setPitch(PI)
                    else
                        let ratio = (ct - cb.getCount()) / ct
                        ef.setPitch(PI * ratio)
                let hpFactor = 200.0
                caster.setHP(caster.getHP() / hpFactor)
                ATTACK_THE_CRAB.play()
                caster.setMaxHP((caster.getMaxHP() / hpFactor).toInt())
                doAfter(5) () ->
                    caster.unpauseEx()
                    caster.setVertexColor(colorA(255, 255, 255, 255))
                    ef.setPos(vec2(0,0))
                    ef.destr()
                    caster.setMaxHP((caster.getMaxHP() * hpFactor).toInt())
                    caster.setHP(caster.getHP() * hpFactor)
function unit.isOnFire() returns boolean
    return unitsOnFire.has(this)
function unit.setOnFire(boolean val)
    if(val)
        unitsOnFire.add(this)
    else
        unitsOnFire.remove(this)


function setOnFire(unit target)
    if(target.isOnFire())
        return
    flashEffect(Abilities.fireBallMissile, target, "head")
    target.setOnFire(true)
    let ef = addEffect(Doodads.firePillarMedium, target, "head")
    let oldSpeed = target.getMoveSpeed()
    target.setMoveSpeed(522)
    let duration = 6.
    getTimer().doPeriodicallyTimed(.5, duration) (CallbackCounted cb) ->
        target.issuePointOrder("move", target.getPos().polarOffset(angle(GetRandomReal(0, 360)), 400))
    getTimer().doPeriodicallyTimed(.10, duration) (CallbackCounted cb) ->
        group g = getUnitsInRangeOfLocMatchingClosure(125, target.getPos()) (unit u) ->
            return u.getOwner().isAllyOf(target.getOwner()) and not u == target and not u.isOnFire()
        for unit u in g
            setOnFire(u)
        target.setHP(target.getHP() - target.getMaxHP() / 200)
        if(cb.isLast())
            target.setOnFire(false)
            target.setMoveSpeed(oldSpeed)
            ef.destr()
        g.destr()
class HpWrapper
    real hp
class VecWrapper
    vec2 pos
init
    // Meat Wagon Wagon
    EventListener.add(EVENT_PLAYER_UNIT_SUMMON) () ->
        if(GetSummonedUnit().getTypeId() == MEAT_WAGON)
            let secretWagon = ReplaceUnitBJ(GetSummonedUnit(), MEAT_WAGON, bj_UNIT_STATE_METHOD_DEFAULTS)
            secretWagon.setBaseDamage(secretWagon.getBaseDamage(0) * 2, 0)
            monsterCreated(secretWagon)

    // whirl pool
    EventListener.add(EVENT_PLAYER_UNIT_SUMMON) () ->
        if(GetSummonedUnit().getTypeId() == WHIRL_POOL)
            let pool = GetSummonedUnit()
            doPeriodicallyTimed(.04, 60) (CallbackCounted cb) ->
                if(cb.isLast())
                    pool.kill()
                if(not pool.isAlive())
                    cb.stop()
                
                let pos = pool.getPos()
                group g = getUnitsInRangeOfLocMatchingClosure(800, pos) (unit u) ->
                    return u.isEnemyOf(pool.getOwner()) and not u.isInvulnerable() and not u.isType(UNIT_TYPE_STRUCTURE)
                for unit u in g
                    let up = u.getPos()
                    u.setXY(up.polarOffset(up.angleTo(pos) - angle(4 * PI/10), 10))
                g.destr()
    // Ice Drop
    EventListener.onCast(ABILITY_ICE_DROP_NEUTRAL) (unit caster) ->
        let tg = EventData.getSpellTargetPos().toVec3()
        let ef = addEffect("Frosty Crystal Drop.mdx", tg + vec3(0, 0, tg.getTerrainZ() + 50))
        doAfter(1.8) ->
            group g = getUnitsInRangeOfLocMatchingClosure(300, tg.toVec2()) (unit u) ->
                return u.isEnemyOf(caster.getOwner()) and not u.isInvulnerable() and u.isAlive()
            for unit u in g
                caster.damageTarget(u, 800)
        doAfter(3) ->
            ef.setPos(vec2(0,0))
            ef.destr()
    // Ghoul Jump
    EventListener.onCast(ghoulJump) (unit caster) ->
        let target = GetSpellTargetUnit()
        PTQUtils.enableFlyingForUnit(caster)
        let distance = caster.getPos().distanceTo(target.getPos())
        Knockback3.add(caster, distance * 2, caster.getPos().angleTo(target.getPos()), angle(PI / 4))
        addToBayWatch(caster, 10)
        getTimer().doPeriodicallyCounted(.04, 500) (cb) ->
            if(caster.getPos().distanceTo(target.getPos()) < 100)
                Knockback3.setVel(caster, 0, angle(0), angle(0))
                caster.setAnimation("Stand Channel")
                caster.pause()
                new DummyCaster()
                    ..origin(target.getPos())
                    ..owner(caster.getOwner())
                    ..castTarget(ABILITY_STUN, 1, OrderIds.firebolt, target)
                cb.stop()
                getTimer().doPeriodicallyCounted(.5, 6) (CallbackCounted cb) ->
                    flashEffect(Objects.battrollBlood, target.getPos(), 2)
                    let damage = 100.
                    caster.damageTarget(target, damage)
                    caster.setHP(caster.getHP() + damage)
                    if(cb.isLast() or not target.isAliveTrick() or not caster.isAliveTrick())
                        caster.unpause()
                        ResetUnitAnimation(caster)
                        cb.stop()
    EventListener.onCast(healthBind) (unit caster) ->
        unit target = GetSpellTargetUnit()
        real duration = 8.0
        let ln = addLightning(LIGHTNING_SPIRIT_LINK, true, caster.getPos(), target.getPos())
        EventListener.add(caster, EVENT_PLAYER_UNIT_DAMAGED) () ->
            let dmg = GetEventDamage()
            BlzSetEventDamage(0)
            group dmged = getUnitsInRangeOfLocMatchingClosure(200, target.getPos()) (unit u) ->
                return u.isEnemyOf(caster.getOwner())
            for unit u in dmged
                caster.damageTarget(u, dmg)
            flashEffect(Abilities.lightningBoltMissile, target, "overhead")
            dmged.destr()
        getTimer().doPeriodicallyTimed(.10, duration) (CallbackCounted cb) ->
            if(cb.isLast() or not caster.isAliveTrick() or not target.isAliveTrick())
                cb.stop()
                ln.destr()
                unregisterEventsForUnit(caster)               
                if(not target.isAliveTrick())     
                    caster.resetAbilityCooldown(healthBind)
            else
                ln.move(true, caster.getPos(), target.getPos())

    EventListener.onCast(counterStrike) (unit caster) ->
        int lvl = caster.getAbilityLevel(counterStrike)
        caster.pause()
        caster.setAnimation(2)
        let whp = new HpWrapper()
        /*trackMonsterHpEffect(caster, 3.0) (diff, last) ->
            if(last)
                caster.setAnimation("Attack Walk Stand Spin")
                group g = GetUnitsInRangeOfLocAll(200, caster.getLoc())
                for unit u in g
                    if(u.isEnemyOf(caster.getOwner()) and not u.isInvulnerable())
                        caster.damageTarget(u, whp.hp)
                g.destr()
                let tim = getTimer()
                tim.doAfter(.25) () ->
                    caster.unpause()
            else if(diff < 0)
                whp.hp -= (diff * lvl)
                caster.addHP(-diff)
            return true*/
    EventListener.onCast('A01L') (unit caster) -> // demonic teleport
        let target = EventData.getSpellTargetPos()
        addEffect(Abilities.flameStrike, caster.getPos())
        caster.setAnimation("Stand Work")
        getTimer().doAfter(.5) () ->
            caster.hide()
            caster.setInvulnerable(true)
            addEffect(Abilities.flameStrike, target)
        getTimer().doAfter(2) () ->
            caster.setPos(target)
            caster.setInvulnerable(false)
            ResetUnitAnimation(caster)
            caster.show()
            group g = GetUnitsInRangeOfLocAll(300, PTQUtils.vec2ToLoc(target))
            for unit u in g
                if(u.isEnemyOf(caster.getOwner()))
                    caster.damageTarget(u, 300)
                    flashEffect(Abilities.flameStrikeDamageTarget, u, "chest")
 
    // Murloc toss
    EventListener.onCast(monsterToss) (unit caster) ->
        let thrown = GetSpellTargetUnit()
        // find a target
        group g = getUnitsInRangeOfLocMatchingClosure(900, caster.getPos()) (unit u) ->
            return u.isEnemyOf(caster.getOwner()) and u.isAliveTrick()
        if(not g.isEmpty())
            let target = g.next()
            SetUnitFacingToFaceUnitTimed(caster, target, 0)
            let distance = caster.getPos().distanceTo(target.getPos())
            addToBayWatch(thrown, 6)
            Knockback3.add(thrown, distance * 2, caster.getPos().angleTo(target.getPos()), angle(PI / 4))
            getTimer().doPeriodicallyCounted(.10, 100) (CallbackCounted cb) ->
                // check if there are any enemies nearby
                group nearby = getUnitsInRangeOfLocMatchingClosure(150, thrown.getPos()) (unit u) ->
                    return u.isEnemyOf(caster.getOwner())
                if(not nearby.isEmpty())
                    let dmg = thrown.getMaxHP()
                    for unit hurt in nearby
                        thrown.damageTarget(hurt, dmg)
                    thrown.explode()
                    cb.stop()

        g.destr()
    EventListener.onCast(murlocSpawn) (unit caster) ->
        for i = 0 to 5
            unit u = createUnit(caster.getOwner(), MURLOC_DRONE, caster.getPos().polarOffset(caster.getFacingAngle(), 50), caster.getFacingAngle())
            monsterCreated(u)
    EventListener.add(EVENT_PLAYER_UNIT_DEATH) () ->
        if(GetDyingUnit().getTypeId() == MURLOC_BARBATUS)
            let u = GetDyingUnit()
            getTimer().doAfter(1) () ->
                unit head = ReplaceUnitBJ(u, MURLOC_HEAD, bj_UNIT_STATE_METHOD_DEFAULTS)
                monsterCreated(head)
    // Murloc Tidal Wave
    EventListener.onCast(murlocTidalWave) (unit caster) ->
        // pick two points that are 2000 apart, 1000 behind the caster
        let top = caster.getPos().polarOffset(caster.getFacingAngle() + angle(PI2 / 3), 1500)
        let bot = caster.getPos().polarOffset(caster.getFacingAngle() + angle(2 * PI2/3), 1500)
        let totalSpan = 4000
        let spanPerWave = 250
        let segments = (totalSpan / spanPerWave).toInt()
        let seg = (bot - top).op_div(segments.toReal())
        let missingSegment = GetRandomInt(((segments / 2).toInt() - 4), ((segments/2).toInt() + 1))
        for i = 0 to segments - 1
            if(i < missingSegment or i > missingSegment + 1)
                let pos = top + seg.op_mult(i.toReal())
                new DummyCaster()
                    ..owner(caster.getOwner())
                    ..origin(pos)
                    ..castPoint(tidalWaveEffect, 1, OrderIds.carrionswarm, pos.polarOffset(caster.getFacingAngle(), 300))

        let chanceToCastAgain = min(1 - (caster.getHP() / caster.getMaxHP()), .8)
        if(GetRandomReal(0, 1) < chanceToCastAgain)
            getTimer().doAfter(1) () ->
                caster.setFacing(caster.getFacingAngle() + angle(PI/2))
                caster.resetAbilityCooldown(murlocTidalWave)
                caster.issueImmediateOrderById(OrderIds.waterelemental)

    // Wolf Blow
    EventListener.onCast(ABILITY_WOLF_BLOW) (unit caster) ->
        caster.pauseEx()
        caster.setAnimation("Attack Slam")
        let size = 2.0
        let count = 15
        getTimer().doPeriodicallyCounted(.10, count) (CallbackCounted cb) ->
            if(cb.isLast() and caster.isAlive())
                let arc = 80.0.asAngleDegrees()
                let cone1 = caster.getPos()
                let cone2 = caster.getPos().polarOffset(caster.getFacingAngle() + arc, 1000)
                let cone3 = caster.getPos().polarOffset(caster.getFacingAngle() -arc, 1000)
                group tg = getUnitsInRangeOfLocMatchingClosure(1000, caster.getPos()) (unit u) ->
                    let isInCone = u.getPos().isInTriangle(cone1, cone2, cone3)
                    return u.isEnemyOf(caster.getOwner()) and not u.isInvulnerable() and isInCone
                for unit u in tg
                    addToBayWatch(u, 6)
                    Knockback3.add(u, 3000, caster.getFacingAngle(), angle(PI / 2.5))
                tg.destr()
            else
                caster.setScale(size + (count - cb.getCount()) * .06)
            if(cb.isLast())
                caster.setScale(size)
                caster.unpauseEx()

    
    // Set fire
    EventListener.onCast(ABILITY_SET_FIRE) (unit caster) ->
        let target = GetSpellTargetUnit()
        setOnFire(target)

    // cyclops lightning
    EventListener.onCast(ABILITY_CYCLOPS_BEAM) (unit caster) ->
        let mvmt = caster.getPos().angleTo(EventData.getAbilityTargetPos()).toVec(75)
        let lt = addLightning(LIGHTNING_FINGER_OF_DEATH, true, caster.getPos(), caster.getPos())
        let start = caster.getPos()
        VecWrapper tgPos = new VecWrapper()
        tgPos.pos = start
        getTimer().doPeriodicallyTimed(.04, 1) (CallbackCounted cb) ->
            tgPos.pos = tgPos.pos + mvmt
            lt.move(true, start, tgPos.pos)
            if(cb.isLast())
                lt.destr()
                destroy tgPos
    // Neck Freeze
    EventListener.onCast(ABILITY_NECK_FREEZE) (unit caster) ->
        let target = GetSpellTargetUnit()
        PTQUtils.enableFlyingForUnit(target)
        target.pause()
        SetUnitLookAt(target, "bone_head", caster, 0, 0, 0)
        let time = 2.
        target.setFlyHeight(200, 200)
        let tick = .10
        let og = caster.getFacingAngle()
        let radPerTick = PI2 * 4 / (time / tick)
        boneCrack.playOnPoint(target.getPos3Real())
        getTimer().doPeriodicallyTimed(tick, time) (CallbackCounted cb) ->
            if(cb.isLast())
                target.setFlyHeight(0, 0)
                ResetUnitLookAt(target)
                caster.damageTarget(target, 400)
                target.unpause()
            else
                target.setFacing(og + angle(radPerTick * cb.getCount()))

    // Crab Jump
    EventListener.onCast(ABILITY_CRAB_JUMP) (unit caster) ->
        group targets = getUnitsInRangeOfLocMatchingClosure(1200, caster.getPos()) (unit u) ->
            return u.isAlive() and u.isEnemyOf(caster.getOwner()) and not u.isInvulnerable()
        doCrabJump(caster, targets)
    
    EventListener.onCast(ABILITY_ROBINHOOD_ARROW) (unit caster) ->
        let ef = addEffect(Abilities.ballistaMissile, caster.getPos3Real().polarProject(100, caster.getFacingAngle(), angle(0)))
        ef.setHeight(60)
        ef.setYaw(caster.getFacingAngle().radians())
        let area = 125.
        let speed = 900
        let rate = 0.04
        let movementPerTick = speed * rate
        let ang = caster.getFacingAngle()
        let movementVec = ang.direction(movementPerTick)
        getTimer().doPeriodicallyTimed(rate, 20) (CallbackCounted cb) ->
            let newPos = ef.getPos3() + movementVec.toVec3()
            ef.setPos(newPos)
            ef.setHeight(newPos.getTerrainZ() - 400)
            let movingTo = newPos.toVec2() + movementVec
            if(movingTo.testForPathability())
                group g = getUnitsInRangeOfLocMatchingClosure(area, movingTo) (unit u) ->
                    return u.isEnemyOf(caster.getOwner()) and not u.isType(UNIT_TYPE_STRUCTURE)
                for unit u in g
                    u.setPos(movingTo)
                g.destr()
            else
                cb.stop()
                let dmg = movingTo.distanceTo(caster.getPos()) / 5
                ef.destr()
                group g = getUnitsInRangeOfLocMatchingClosure(area, movingTo) (unit u) ->
                    return u.isEnemyOf(caster.getOwner()) and not u.isType(UNIT_TYPE_STRUCTURE)
                for unit u in g
                    caster.damageTarget(u, dmg)
                g.destr()
    // mammoth ram
    EventListener.onCast(ABILITY_RAM) (unit caster) ->
        let target = GetSpellTargetUnit()
        SetUnitFacingToFaceUnitTimed(caster, target, 0)
        caster.pause()
        caster.setAnimation("Spell")
        let spd = caster.getMoveSpeed()
        SOUND_MAMMOTH_CHARGE_WINDUP.playOnPoint(caster.getPos3Real())
        getTimer().doAfter(1.5) () ->
            caster.unpause()
            let dist = caster.getPos().distanceTo(target.getPos())
            if(dist > 250)
                caster.setMoveSpeed(522)
                caster.issueTargetOrder("attack", target)
                caster.setAnimation("Walk Fast")
                getTimer().doPeriodicallyCounted(.10, 50) (CallbackCounted cb) ->
                    if(caster.getPos().distanceTo(target.getPos()) < 200)
                        SOUND_MAMMOTH_CHARGE_HIT.playOnPoint(target.getPos3Real())
                        caster.setMoveSpeed(spd)
                        caster.issuePointOrder("attack", caster.getPos())
                        cb.stop()
                        Knockback3.add(target, 1600, caster.getFacingAngle(), angle(PI/4))
                        addToBayWatch(target, 10)
                        caster.damageTarget(target, 150 + dist / 2)
                    else if(cb.isLast())
                        caster.setMoveSpeed(spd)
                        caster.issuePointOrder("attack", caster.getPos())
            else
                SOUND_MAMMOTH_CHARGE_HIT.playOnPoint(target.getPos3Real())
                Knockback3.add(target, 800, caster.getFacingAngle(), angle(PI/3))
                addToBayWatch(target, 10)
                caster.damageTarget(target, 400)
    // mammoth turn into skeleton
    EventListener.add(EVENT_PLAYER_UNIT_DEATH) () ->
        let ded = GetDyingUnit()
        if(ded.getTypeId() == DIRE_MAMMOTH)
            // use a dummy to keep next wave from starting
            let dummy = createUnit(ded.getOwner(), UnitIds.footman, vec2(0,0), angle(0))
            monsterCreated(dummy)
            dummy.setInvulnerable(true)
            dummy.hide()
            getTimer().doAfter(2) () ->
                unit u = ReplaceUnitBJ(ded, SKELETON_MAMMOTH, bj_UNIT_STATE_METHOD_MAXIMUM)
                flashEffect(Abilities.animateDeadTarget, u, "head")
                monsterCreated(u)
                dummy.kill()
                dummy.remove()
    // Robin hood gold drop
    EventListener.add(EVENT_PLAYER_UNIT_ATTACKED) () ->
        let attacker = GetAttacker()
        var gold = 250
        if(attacker.getTypeId() == SKELETON_ROBIN_HOOD)
            let attacked = GetAttackedUnitBJ()
            if(attacked.isType(UNIT_TYPE_HERO))
                getTimer().doAfter(1) () ->
                    if(attacked.getOwner().getGold() >= gold)
                        attacked.getOwner().addGold(-gold)
                    createTTEx(attacked.getPos3Real(), vec2(0, -.03), "-" + gold.toString(), 10, 2, colorA(255, 215, 0,0))
                    for i = 0 to GetRandomInt(0, 4)
                        if(attacked.getOwner().getGold() > 0)
                            createItem('gold', attacked.getPos().polarOffset(attacked.getPos().angleTo(attacker.getPos()), (50 + i * 50).toReal()))

            
    EventListener.add(EVENT_PLAYER_UNIT_SPELL_CAST) () ->
        let abil = GetSpellAbilityId()
        if(abil == ABILITY_SET_TARGET_WAY_GATE)
            let tg = GetSpellTargetUnit()
            let caster = GetSpellAbilityUnit()
            if(not tg.hasAbility(ABILITY_SET_TARGET_WAY_GATE))
                printTimedToPlayer("Invalid Target. You must target another Way Gate", 4, caster.getOwner())
                caster.disableAbility(ABILITY_SET_TARGET_WAY_GATE, true, false)
                getTimer().doAfter(1) () ->
                    caster.disableAbility(ABILITY_SET_TARGET_WAY_GATE, false, false)
    EventListener.onCast(ABILITY_SET_TARGET_WAY_GATE) (unit caster) ->
        let tg = EventData.getSpellTargetPos()
        if(GetSpellTargetUnit().hasAbility(ABILITY_SET_TARGET_WAY_GATE))
            WaygateSetDestination(caster, tg.x, tg.y)
            WaygateActivate(caster, true)


                
    
