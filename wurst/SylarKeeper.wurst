package SylarKeeper
import ClosureEvents
import CustomAbilities
import GameTimer
import ClosureTimers
import TimerUtils
import ClosureForGroups
import Texttag
import Vectors
import Effect
import Assets
import OrderIds
import HashSet
import Lightning
import DummyCaster
import Knockback3
import AbilityUtils
import LinkedList
import CustomUnits
import HashList
import HashMap
import PTQConstants

constant LinkedList<int> SYLAR_DUMMY_ABILITIES = new LinkedList<int>

// Map of all abilities known by all friendly heros. There's currently no way to get this
// from the unit data at runtime so we have to build it up as heroes learn abilities
HashMap<unit, HashSet<int>> learnedHeroAbilities = new HashMap<unit, HashSet<int>>

// map from <sylars> to the currently stolen ability ID that they currently have
HashMap<unit, int> currentlyStolenAbility = new HashMap<unit, int>

function setUpDummyAbility(int dummyId, int learnedAbilityId, int stealLevel)
    BlzSetAbilityIcon(dummyId, BlzGetAbilityIcon(learnedAbilityId))
    BlzSetAbilityTooltip(dummyId, "Steal Ability: " + BlzGetAbilityTooltip(learnedAbilityId, stealLevel), 0)
    BlzSetAbilityExtendedTooltip(dummyId, BlzGetAbilityExtendedTooltip(learnedAbilityId, stealLevel), 0)
init
    SYLAR_DUMMY_ABILITIES.add(sylarLearnAbility0)
    SYLAR_DUMMY_ABILITIES.add(sylarLearnAbility1)
    SYLAR_DUMMY_ABILITIES.add(sylarLearnAbility2)
    // Handle collecting all learned hero skills
    EventListener.add(EVENT_PLAYER_HERO_SKILL) () ->
        let caster = GetLearningUnit()
        let spell = GetLearnedSkill()
        if(caster.getOwner().isAllyOf(Player(10)))
            var s = learnedHeroAbilities.get(caster)
            if(s == null)
                s = new HashSet<int>
                learnedHeroAbilities.put(caster, s)
            s.add(spell)

    // Handle leveling up a stolen ability when the Steal Ability skill is leveled up
    EventListener.add(EVENT_PLAYER_HERO_SKILL) () ->
        let spell = GetLearnedSkill()
        if(spell == learnAbility)
            let caster = GetLearningUnit()
            let lvl = caster.getAbilityLevel(learnAbility)
            if(currentlyStolenAbility.has(caster))
                caster.setAbilityLevel(currentlyStolenAbility.get(caster), lvl)
     
    // Handle cases where we don't allow steal ability
    EventListener.add(EVENT_PLAYER_UNIT_SPELL_CAST) () ->
        let caster = GetSpellAbilityUnit()
        let spell = GetSpellAbilityId()
        if(spell == learnAbility)
            let target = GetSpellTargetUnit()
            boolean willCast = false
            if(not learnedHeroAbilities.has(target)) 
                printTimedToPlayer("Target has not learned any abilities yet", 3, caster.getOwner())
            else if (caster == target)
                printTimedToPlayer("Cannot cast on yourself (although that would be funny)", 3, caster.getOwner())
            else
                willCast = true
            if(not willCast)
                caster.issueImmediateOrder("stop") 
    // Handle the actual cast mechanics of steal ability. Whew
    EventListener.onCast(learnAbility) (unit caster) ->
        let target = GetSpellTargetUnit()
        if(learnedHeroAbilities.has(target))
            if(currentlyStolenAbility.has(caster))
                caster.removeAbility(currentlyStolenAbility.get(caster))
            target.setHP(target.getHP() / 4)
            SetUnitFacingToFaceUnitTimed(target, caster, .5)
            flashEffect(Abilities.thunderclapTarget, target, "head")
            let abilSet = learnedHeroAbilities.get(target)
            let stealLevel = caster.getAbilityLevel(learnAbility)
            unit u = CreateUnit(caster.getOwner(), SYLAR_LEARN_ABILITY_SHOP, 0, 0, 0)
            caster.getOwner().selectSingle(u)
            HashMap<int, int> abilityMap = new HashMap<int, int>
            var i = 0
            for int potentialAbility in abilSet
                abilityMap.put(SYLAR_DUMMY_ABILITIES.get(i), potentialAbility)
                i++
            for int dummyAbility in SYLAR_DUMMY_ABILITIES
                if(abilityMap.has(dummyAbility))
                    u.addAbility(dummyAbility)
                    if(GetLocalPlayer() == caster.getOwner())
                        setUpDummyAbility(dummyAbility, abilityMap.get(dummyAbility), stealLevel)
            timer keepSelection = getTimer()
            keepSelection.doPeriodically(.25) (CallbackPeriodic cb) ->
                // hacky way to keep the selection on the dummy store unit until the user makes a selection
                caster.getOwner().selectSingle(u)
            EventListener.onCast(u) (int id) ->
                if(abilityMap.has(id))
                    let newAbil = abilityMap.get(id)
                    caster.addAbility(newAbil)
                    currentlyStolenAbility.put(caster, newAbil)
                    caster.getOwner().selectSingle(caster)
                    caster.setAbilityLevel(newAbil, stealLevel)
                    u.remove()
                    unregisterEventsForUnit(u)
                    keepSelection.release()
                    if(GetLocalPlayer() == caster.getOwner())
                        BlzSetAbilityPosX(newAbil, 0)
                        BlzSetAbilityPosY(newAbil, 2)
    
    // Telekenesis!
    EventListener.onCast(telekenesis) (unit caster) ->
        let lvl = caster.getAbilityLevel(telekenesis)
        let target = getSpellTargetPos()
        let duration = (2 + lvl * 2).toReal()
        group affected = GetUnitsInRangeOfLocAll((200 + (100 * lvl)).toReal(), GetSpellTargetLoc())
        boolean casterIsAffected = false
        for unit u in affected
            if(IsUnitType(u, UNIT_TYPE_STRUCTURE) or u.getTypeId() == UNSTOPPABLE_TANK)
                affected.removeUnit(u)
            else
                addToBayWatch(u, duration + 2)
            if(u == caster)
                casterIsAffected = true
        let cursor = CreateUnit(caster.getOwner(), DUMMY_CURSOR, target.x, target.y, 0)
        cursor.setTimedLife(duration)
        timer t = getTimer()
        caster.getOwner().selectSingle(cursor)
        t.doPeriodicallyTimed(.04, duration) (CallbackCounted cb) ->
            if(cb.isLast() or (not casterIsAffected and not caster.isChannelingAbility(telekenesis)))
                caster.getOwner().selectSingle(caster)
                cb.stop()
                affected.destr()
            else
                for unit u in affected
                    let movementAmount = min(u.getPos().distanceTo(cursor.getPos()) / 10, (lvl * 20).toReal())
                    u.setPos(u.getPos().moveTowards(cursor.getPos(), movementAmount))
    // Clock!
    EventListener.onCast(sylarWatch) (unit caster) ->
        let lvl = caster.getAbilityLevel(sylarWatch)
        let target = getSpellTargetPos()
        let targetLoc = GetSpellTargetLoc()
        let rotations = lvl
        let radius =  (100 + 100 * lvl).toReal()
        let timePerRotation = 5.0
        let intelligence = caster.getInt(true)
        let dmg = lvl * 100 + lvl * intelligence
        vec2 start = target
        vec2 e = target.add(0, -radius)
        vec2 segment = e - start
        let lg = addLightning(LIGHTNING_CHAIN_LIGHTNING_PRIMARY, true, start, e)
        getTimer().doPeriodicallyTimed(1.0, timePerRotation * rotations) (CallbackCounted cb) ->
            group g = GetUnitsInRangeOfLocAll(radius, targetLoc)
            for u in g
                if(u.isEnemyOf(caster.getOwner()))
                    caster.damageTarget(u, dmg.toReal())
                    flashEffect(Abilities.lightningBoltMissile, u, "head")
            g.destr()
            for i = 1 to 12
                vec2 t = start + segment.rotate(angle(PI/6) * i.toReal())
                flashEffect(Abilities.lightningShieldBuff, t)
        RealWrapper mult = new RealWrapper()
        real ticksPerRotation = timePerRotation / .10
        real movementAmt = 1 / ticksPerRotation
        getTimer().doPeriodicallyTimed(.10, timePerRotation * rotations) (CallbackCounted cb) ->
            let ee = start + segment.rotate(angle(-PI * 2 * mult.val))
            mult.val += movementAmt
            lg.move(true, start, ee)
            if(cb.isLast())
                lg.destr()
        
    EventListener.onCast(sylarFrostNova) (caster) ->
        let additionalDmg = caster.getInt(true) * caster.getAbilityLevel(sylarFrostNova)
        let target = GetSpellTargetUnit()
        caster.damageTarget(target, additionalDmg.toReal())
    EventListener.add(EVENT_PLAYER_UNIT_ISSUED_POINT_ORDER) () ->
        if(GetOrderedUnit().getTypeId() == DUMMY_CURSOR)
            GetOrderedUnit().setPos(getOrderPos())
class RealWrapper
    real val