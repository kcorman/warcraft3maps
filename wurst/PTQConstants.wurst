package PTQConstants
import SoundUtils
import Simulate3dSound
import GameTimer
import LinkedList
import Item
import TimerUtils
import ClosureTimers
import Knockback3
public constant CROW_FORM = 'Amrf'
public constant LOCUST = 'Aloc'
public constant player GoodGusy = Player(10)
public constant player BadGuy = Player(11)
public item posTestItem = createItem('odef', vec2(0,0))
public int WATER_LEVEL = 5 // the terrain level of deep water on the map. Gotta keep this consistent for the check to work

public real timeBetweenWaves = 3.
public real difficultyMultplier = 1.0
public boolean totalLossMode = true

public function getComputerAlly(player p) returns player
    player result = BadGuy
    if(p.isAllyOf(GoodGusy))
        result = GoodGusy
    return result

public function getHumanPlayers()
    
interface PredicateClosure
    function test(unit u) returns boolean
public function getUnitsInRangeOfLocMatchingClosure(real radius, vec2 pos, PredicateClosure closure) returns group
    group g = GetUnitsInRangeOfLocAll(radius, PTQUtils.vec2ToLoc(pos))
    for unit u in g
        if(not closure.test(u))
            g.removeUnit(u)
    destroy closure
    return g
public interface DelayedEffect
    function run()

public function unit.isInWater() returns boolean
    return GetTerrainCliffLevel(this.getX(), this.getY()) <= WATER_LEVEL

public function vec2.testForPathability() returns boolean
    posTestItem.setPos(this)
    let res = posTestItem.getPos() == this
    posTestItem.setPos(vec2(0,0))
    return res

// list of units that might end up in deep water
class Swimmer
    unit u
    real finishWatchingTime
    vec2 ogLoc
    vec2 movingLoc
LinkedList<Swimmer> BAY_WATCH = new LinkedList<Swimmer>
public function addToBayWatch(unit u, real maxDuration)
    Swimmer swim = new Swimmer()
    swim.u = u
    swim.ogLoc = u.getPos()
    swim.movingLoc = swim.ogLoc
    swim.finishWatchingTime = maxDuration * 2 + getElapsedGameTime()
    BAY_WATCH.add(swim)


public class PTQUtils
    static function enableFlyingForUnit(unit u)
        u.addAbility(CROW_FORM)
        u.removeAbility(CROW_FORM)
    static function vec2ToLoc(vec2 vec) returns location
        return Location(vec.x, vec.y)
    static function makeUnitUnTargetable(unit u)
        u.addAbility(LOCUST)
    static function playLocalSound(SoundDefinition snd, vec2 pos, int recycleDuration) returns sound
        sound s = snd.play(recycleDuration).snd
        bindSoundToPoint(s, pos.x, pos.y, 400,800, 15000)
        return s
    static function delayedEffect(real delay, DelayedEffect eff)
        timer t = getTimer()
        t.setData(eff castTo int)
        t.start(delay, () -> (begin
            DelayedEffect sa = (GetExpiredTimer().getData() castTo DelayedEffect)
            GetExpiredTimer().destr()
        end))

init
    getTimer().doPeriodically(1) (CallbackPeriodic cb) ->
        if(not BAY_WATCH.isEmpty())
            let currTime = getElapsedGameTime()
            let itr = BAY_WATCH.iterator()
            while(itr.hasNext())
                let swim = itr.next()
                var moving = false
                if(swim.movingLoc.distanceTo(swim.u.getPos()) > 50)
                    moving = true
                    swim.movingLoc = swim.u.getPos()
                if(currTime >= swim.finishWatchingTime)
                    itr.remove()
                    destroy swim
                else if(swim.u.isInWater() and not moving)
                    // kill heroes and weak units, make strong units jump back
                    if(not swim.u.isType(UNIT_TYPE_HERO) and swim.u.getLevel() > 5)
                        Knockback3.add(swim.u, swim.ogLoc, 2000)
                        swim.finishWatchingTime = currTime + 3
                    else
                        swim.u.kill()
                        itr.remove()
                        destroy swim