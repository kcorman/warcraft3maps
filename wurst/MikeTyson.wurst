package MikeTyson
import ClosureEvents
import CustomAbilities
import GameTimer
import ClosureTimers
import TimerUtils
import ClosureForGroups
import Texttag
import Vectors
import GameInit
import MissleEffects
import Effect
import Assets
import OrderIds
import HashSet
import Lightning
import DummyCaster
import SoundUtils
import Knockback3
import AbilityUtils
import LinkedList
import CustomUnits
import HashList
import CustomSummonedUnits
import HashMap
import PTQConstants
import CustomUnitIds

let SOUND_KNOCKOUT = new SoundDefinition("Knockout.mp3", false)
let SOUND_DYNAMITE_PUNCH = new SoundDefinition("MikeTysonPunch.mp3", false)
let SOUND_MIKE_KNOCKED_DOWN = new SoundDefinition("MikeHitTheGround.mp3", false)
let SOUND_MIKE_COUNT = new SoundDefinition("MikeCounting1.mp3", true)
let SOUND_MIKE_GET_UP = new SoundDefinition("MikeGetsUp.mp3", false)
let SOUND_MIKE_DED = new SoundDefinition("MikeDed.mp3", false)

HashMap<unit, int> counters = new HashMap<unit, int>
HashSet<unit> unitsThatCantRevive = new HashSet<unit>
function getCount(unit u) returns int
    if(counters.has(u))
        return counters.get(u)
    return 0

function incrCount(unit u)
    counters.put(u, getCount(u) + 1)

init
    EventListener.add(EVENT_PLAYER_UNIT_ATTACKED) () ->
        if(EventData.getAttackerUnit().hasAbility(ABILITY_DYNAMITE_PUNCH))
            let attacker = EventData.getAttackerUnit()
            let attacked = GetAttackedUnitBJ()
            incrCount(attacker)
            let count = (getCount(attacker) % 3).toInt()
            if(count == 0)
                SOUND_DYNAMITE_PUNCH.playOnPoint(attacker.getPos3Real())
                attacker.setVertexColor(colorA(100, 255, 255, 255))
                doAfter(.15) () ->
                    attacker.setVertexColor(colorA(255, 255, 255, 255))
                    attacker.damageTarget(attacked, attacker.getBaseDamage(0) * attacker.getAbilityLevel(ABILITY_DYNAMITE_PUNCH).toReal())
                    if(not attacked.isAliveTrick())
                        SOUND_KNOCKOUT.playOnPoint(attacker.getPos3Real())
                        Knockback3.add(attacked, 800, attacker.getFacingAngle(), angle(PI/4))
    EventListener.add(EVENT_PLAYER_UNIT_DEATH) () ->
        if(EventData.getDyingUnit().hasAbility(ABILITY_GET_BACK_UP) and not unitsThatCantRevive.has(EventData.getDyingUnit()))
            let u = EventData.getDyingUnit()
            u.revive(u.getPos(), false)
            u.setAnimation("Decay Flesh")
            u.setTimeScale(.10)
            u.setInvulnerable(true)
            u.pause()
            let timePerCount = 2.7 / 4
            let totalTime = timePerCount * 10 // the sound clip is 4 counts per 2.7 seconds
            let percentToGetUp = .06 + 0.04 * u.getAbilityLevel(ABILITY_GET_BACK_UP)
            SOUND_MIKE_KNOCKED_DOWN.playOnPoint(u.getPos3Real())
            doAfter(1) () ->
                let countingSound = SOUND_MIKE_COUNT.playOnPoint(u.getPos3Real(), totalTime.toInt() + 2)
                doPeriodicallyCounted(timePerCount, 10) (CallbackCounted cb) ->
                    createTTEx(u.getPos3Real(), vec2(0, .03), (11 - cb.getCount()).toString(), 10, timePerCount, colorA(255, 255,255,255))
                    if(cb.getCount() < 9 and GetRandomReal(0, 1) <= percentToGetUp)
                        countingSound.snd.stop(false, false)
                        SOUND_MIKE_GET_UP.playOnPoint(u.getPos3Real())
                        cb.stop()
                        doAfter(1.5) () ->
                            ResetUnitAnimation(u)
                            u.unpause()
                            u.setTimeScale(1)
                            u.setInvulnerable(false)
                    else if(cb.isLast())
                        SOUND_MIKE_DED.play()
                        countingSound.snd.stop(false, false)
                        u.setInvulnerable(false)
                        unitsThatCantRevive.add(u)
                        u.kill()
                        doAfter(3) () ->
                            unitsThatCantRevive.remove(u)
                            ResetUnitAnimation(u)
                            u.unpause()
                            u.setTimeScale(1)

