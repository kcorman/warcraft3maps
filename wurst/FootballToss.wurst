package FootballToss
import DummyCaster

import ClosureTimers
import ClosureEvents
import ClosureForGroups
import LinkedList
import OrderIds
import Vectors

constant int START_FOOTBALL_ID = 'A008'
constant int FOOTBALL_ABILITY_ID = 'A019'
constant real ABILITY_RANDOM_LEVEL_FACTOR = .05
constant real ABILITY_RANDOM_BASE = .25

init
    EventListener.add(EVENT_PLAYER_UNIT_SPELL_EFFECT) () ->
        let ogCaster = GetSpellAbilityUnit()
        let lvl = ogCaster.getAbilityLevel(START_FOOTBALL_ID)
        if(GetSpellAbilityId() == START_FOOTBALL_ID)
            let target = GetSpellTargetUnit()
            new DummyCaster()
                ..origin(ogCaster.getPos())
                ..owner(ogCaster.getOwner())
                ..delay(5)
                ..castTarget(FOOTBALL_ABILITY_ID, lvl, OrderIds.firebolt, target)
        else if(GetSpellAbilityId() == FOOTBALL_ABILITY_ID)
            // check if the toss should propegate
            
            let chanceToPropegate = ABILITY_RANDOM_BASE + ABILITY_RANDOM_LEVEL_FACTOR * lvl
            //if(GetRandomReal(0, 1.0) < chanceToPropegate)
            if(true) 
                let oldTarget = GetSpellTargetUnit()
                LinkedList<unit> singleton = new LinkedList<unit>()
                forUnitsInRange(oldTarget.getPos(), 800.) (unit u) ->
                    if(singleton.isEmpty())
                        if(u.getOwner().isEnemyOf(ogCaster.getOwner()) and (not u == oldTarget) and (not u.isInvulnerable()) and u.isAlive() and GetRandomReal(0, 1.0) < chanceToPropegate)
                            singleton.add(u)

                oldTarget.setAnimation("attack")
                if(not singleton.isEmpty())
                    let newTarget = singleton.pop()
                    oldTarget.setFacing(oldTarget.getPos().angleTo(newTarget.getPos()))
                    doAfter(.75) () ->
                        ResetUnitAnimation(oldTarget)
                        new DummyCaster()
                        ..origin(oldTarget.getPos())
                        ..owner(ogCaster.getOwner())
                        ..delay(5)
                        ..castTarget(FOOTBALL_ABILITY_ID, lvl, OrderIds.firebolt, newTarget)
                        
        
