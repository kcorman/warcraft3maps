package Waves
import LinkedList
import TimerUtils
import MonsterAbilities
import ClosureEvents
import GameInit
import ClosureTimers
import CustomAbilities
import PTQConstants
import Quest
import Icons
import SoundUtils
import UnitTrainers
import Abilities
import Units
import QuestItem
import CustomUnitIds
import WeatherEffects
import Weather
import CustomUnits
constant int NUM_WAVES = 13
constant int MAX_GOOD_UNITS = 5
constant int FOOTMAN = 'hfoo'
constant int SORCERESS = 'hsor'
constant int GHOUL = 'ugho'
constant int BIG_GOOL = 'u005'
constant int TUFF_ZOMBIE = 'n00D'
constant int GOST = 'n008'
constant int GHOST_GOLEM = 'n009'
constant int GENERAL_SPIDER = 'u006'
constant int NECRO = 'unec'
constant int STARCHES = 'u003'
constant int ZOMBIE = 'n00A'
constant int SKELETON_PRIEST = 'u00D'
constant int OBSIDIAN_STATUTE = 'u00E'
constant int ZOMBIEMANCER = 'u002'
constant int FOOTPERSON = 'h007'
constant int BOMBERMAN = 'h008'
constant int MEAT_WAGON = 'umtw'
constant int MEAT_WAGON_WAGON = 'u007'

constant int TAVERN_TYPE = 'n006'
constant int KEEP_TYPE = 'h005'
constant int GOOD_NEXUS_TYPE = 'h003'
constant int BAD_NEXUS_TYPE = 'n002'
constant int VILLAGER = 'u000'
constant int INITIAL_GOLD = 9001
constant int INITIAL_WOOD = 200
constant int UNIT_TRAINER_ABILITY = 'A00P'
constant rect BAD_GUY_01 = gg_rct_LandBad01
constant rect BAD_GUY_02 = gg_rct_LandBad02 
constant rect BAD_GUY_03 = gg_rct_LandBad03 
constant hint = new SoundDefinition(Sounds.hint, false)
constant bossSound = new SoundDefinition(Sounds.gameFound, false)
LinkedList<unit> goodUnits = new LinkedList<unit>

int currentWaveIndex = 0
LinkedList<Wave> waves = null
timerdialog timerDialog
Wave currentWave
leaderboard currentWaveBoard
public function trackUnitInCurrentWave(unit u)
    if(currentWave != null)
        currentWave.actualUnits.add(u)

class Wave
    LinkedList<UnitAndAmount> units
    LinkedList<unit> actualUnits
    boolean val = true
    boolean failed = false
    int counter = 0
    string helperText
    // Note there is a 'boss' boolean on both the UnitAndAmount class and this one
    // On this one it controls which sound is played
    // on UnitAndAmount, it controls whether or not the unit gives extra loot and whether they spawn in 3 places or just1
    boolean boss
    construct(LinkedList<UnitAndAmount> units)
        this.units = units
        this.helperText = null
        this.boss = false
    construct(LinkedList<UnitAndAmount> units, string helperText, boolean boss)
        this.units = units
        this.helperText = helperText
        this.boss = boss
    

    function spawnMonster(UnitAndAmount amt)
        let diffAdjust = (1 + (difficultyMultplier - 1) * .5) // difficulty 1 means 1x units hp, difficulty 2 means 1.5x units, etc.
        int actualAmt = (amt.relativeAmount * diffAdjust).toInt()
        for i = 1 to actualAmt
            unit u = prepareUnit(createUnit(BadGuy, amt.typ, BAD_GUY_03.getCenter(), angle(0)), amt.boss)
            
            flashEffect(Abilities.darkSummonTarget, u, "origin")
            monsterCreated(u)
            if (not amt.boss)
                u = prepareUnit(createUnit(BadGuy, amt.typ, BAD_GUY_01.getCenter(), angle(0)), amt.boss)
                flashEffect(Abilities.darkSummonTarget, u, "origin")
                monsterCreated(u)
                u = prepareUnit(createUnit(BadGuy, amt.typ, BAD_GUY_02.getCenter(), angle(0)), amt.boss)
                flashEffect(Abilities.darkSummonTarget, u, "origin")
                monsterCreated(u)
    // Most unit preparation should go in MonsterAbilities#monsterCreated
    // but there are some things we only want to have apply to the initial set of created
    // monsters and not summoned units, such as giving loot
    function prepareUnit(unit u, boolean boss) returns unit
        if(boss)
            u.addAbility(ABILITY_GIVES_BOSS_LOOT)
        else
            u.addAbility(ABILITY_GIVES_LOOT)
        return u

    function spawn()
        currentWave = this
        addMonsterToWave = (unit u) ->
            actualUnits.add(u)
        currentWave.failed = false
        actualUnits = new LinkedList<unit>
        LeaderboardSetLabel(currentWaveBoard, "Wave - " + (currentWaveIndex + 1).toString() + " / " + waves.size().toString())
        for UnitAndAmount amt in units
            spawnMonster(amt)
        if(currentWave.helperText != null)
            printTimed(currentWave.helperText, 8)
        if(currentWave.boss)
            bossSound.play()
        else
            hint.play()
        updateBoardRemainingEnemies()
        getTimer()..doPeriodically(5) (cb) ->
            if(counter % 3 == 0)
                orderAttack()
            counter++
            boolean allDead = true
            let itr = actualUnits.iterator()
            while(itr.hasNext())
                unit u = itr.next()
                if(u.isAliveTrick())
                    allDead = false
                else
                    itr.remove()
            destroy itr


            if allDead
                if(failed)
                    print("You lost. Will restart from three waves ago.")
                    currentWaveIndex -= 3
                else
                    print("Wave defeated")
                    currentWaveIndex = currentWaveIndex + 1
                actualUnits.clear()
                Utils.reviveAllheroes()
                startWave()
                GetExpiredTimer().destr()
        orderAttack()
    
    function forceEnd()
        for unit u in actualUnits
            u.kill()

    function orderAttack()
        group g = GetUnitsOfPlayerMatching(BadGuy, Condition(() -> begin
            return not GetFilterUnit().isType(UNIT_TYPE_STRUCTURE) and not GetFilterUnit().hasAbility(UNIT_TRAINER_ABILITY)
        end))
        for unit u in g
            u.issuePointOrder("attack", THE_BANDIT.getPos())
        g.destr()

function purgeDeadUnits()
    LLIterator<unit> itr = goodUnits.iterator()
    while(itr.hasNext())
        unit u = itr.next()
        if(not u.isAlive())
            itr.remove()
    destroy itr

// TODO: Is there a better way to do this?
function getUnitNameById(int id) returns string
    let u = createUnit(Player(11), id, vec2(0,0), angle(0))
    let name = u.getName()
    u.remove()
    return name
function spawnGoodGusy()
    purgeDeadUnits()
    THE_BANDIT.issuePointOrder("attack", gg_rct_BanditCamp.getCenter())
    while(goodUnits.size() > MAX_GOOD_UNITS)
        goodUnits.pop().explode()
    LinkedList<unit> trainers = getUnitTrainers()
    LLIterator<unit> itr = trainers.iterator()
    vec2 spawnSpot = gg_rct_helperArea.getCenter()
    while(itr.hasNext())
        unit template = itr.next()
        if(template.isAliveTrick())
            unit u = createUnit(GoodGusy, template.getTypeId(), spawnSpot, angle(0))
            flashEffect(Abilities.massTeleportTarget, u, "origin")
            goodUnits.add(u)
        else
            itr.remove()
    destroy itr


function startWave()
    if(currentWaveIndex >= waves.size())
        Utils.win()

    spawnGoodGusy()
    Wave wave = waves.get(currentWaveIndex)
    timer startTimer = getTimer()
    startTimer.setData(wave castTo int)
    startTimer.start(timeBetweenWaves, () -> (begin
        Wave wa = (GetExpiredTimer().getData() castTo Wave)
        wa.spawn()
        GetExpiredTimer().release()
    end))
    if(timerDialog != null)
        DestroyTimerDialog(timerDialog)
    timerDialog = CreateTimerDialog(startTimer)
    TimerDialogSetTitle(timerDialog, "Next Wave Starting In")
    TimerDialogDisplay(timerDialog, true)

function toList(vararg UnitAndAmount units) returns LinkedList<UnitAndAmount>
    LinkedList<UnitAndAmount> result = new LinkedList<UnitAndAmount>
    for UnitAndAmount u in units
        result.add(u)
    return result
    

class UnitAndAmount
    int typ
    int relativeAmount
    // Boss specifies whether this unit grants boss loot and only spawns in one place or not
    bool boss

    construct(int typ, int relative, bool boss)
        this.typ = typ
        this.relativeAmount = relative
        this.boss = boss

    construct(int typ, int relative)
        this.typ = typ
        this.relativeAmount = relative
        this.boss = false
    
init


    waves = new LinkedList<Wave>
    waves.add(new Wave(toList(
        new UnitAndAmount(ZOMBIE, 3)
    )))
    waves.add(new Wave(toList(
        new UnitAndAmount(ZOMBIE, 3),
        new UnitAndAmount(GHOUL, 1)
    )))
    waves.add(new Wave(toList(
        new UnitAndAmount(ZOMBIE, 3),
        new UnitAndAmount(GHOUL, 1),
        new UnitAndAmount(TUFF_ZOMBIE, 1)
    ), "Zombies, Ghouls, and tuff zombies. Just getting started.", false))
    waves.add(new Wave(toList(
        new UnitAndAmount(ZOMBIE, 3),
        new UnitAndAmount(SKELETON_PRIEST, 1),
        new UnitAndAmount(GHOUL, 1),
        new UnitAndAmount(TUFF_ZOMBIE, 1)
    ), "Priests heal enemies. Might wanna kill them first", false))
    waves.add(new Wave(toList(
        new UnitAndAmount(ZOMBIE, 4),
        new UnitAndAmount(SKELETON_PRIEST, 2),
        new UnitAndAmount(GHOUL, 2),
        new UnitAndAmount(TUFF_ZOMBIE, 4),
        new UnitAndAmount(BIG_GOOL, 1)
    )))
    waves.add(new Wave(toList(
        new UnitAndAmount(TUFF_ZOMBIE, 4),
        new UnitAndAmount(GHOSTMANCER, 2)
    ), "Careful, Ghostmancer lightning deals more damage with each jump!", false))
    waves.add(new Wave(toList(
        new UnitAndAmount(GIANT_GHOUL, 1, true) // boss wave
    ), "Boss: Giant Ghoul. Regenerates health by eating your face.", true))
    waves.add(new Wave(toList(
        new UnitAndAmount(ZOMBIE, 3),
        new UnitAndAmount(GHOUL, 2),
        new UnitAndAmount(TUFF_ZOMBIE, 2),
        new UnitAndAmount(BIG_GOOL, 3, false),
        new UnitAndAmount(GOST, 4),
        new UnitAndAmount(MEAT_WAGON, 1),
        new UnitAndAmount(GHOST_GOLEM, 1),
        new UnitAndAmount(GHOSTMANCER, 3)
    ), "Gosts possess. And meatwagons do the ol' siegy thing.", false))
    waves.add(new Wave(toList(
        new UnitAndAmount(ZOMBIE, 5),
        new UnitAndAmount(MEAT_WAGON, 1),
        new UnitAndAmount(ZOMBIEMANCER, 3)
    ), "Zombiemancers summon more zombies. Which make corpses. Ugh.", false))
    waves.add(new Wave(toList(
        new UnitAndAmount(LIFE_STEALING_GHOST, 2),
        new UnitAndAmount(GHOUL, 4)
    ), "Life stealing ghosts return all damage taken to their target. Try not to kill your friends.", false))
    waves.add(new Wave(toList(
        new UnitAndAmount(ZOMBIE, 5),
        new UnitAndAmount(MEAT_WAGON, 1),
        new UnitAndAmount(ZOMBIEMANCER, 6),
        new UnitAndAmount(OBSIDIAN_STATUTE,3)
    ), "Statues heal. Who would've thought?", false))
    waves.add(new Wave(toList(
        new UnitAndAmount(MEAT_WAGON_WAGON, 3) // boss, kinda
    ), "Boss: The Meat Wagon Wagon. Keep moving!", true))
    waves.add(new Wave(toList(
        new UnitAndAmount(DETH_NIGHT, 1),
        new UnitAndAmount(CRYPT_FREND, 6)
    ), "These guys know the only viable undead strategy. That DK can heal the fiends for days...", false))
    waves.add(new Wave(toList(
        new UnitAndAmount(ZOMBIE, 5),
        new UnitAndAmount(STARCHES, 1, true) // boss
    ), "Boss: Starches. Stay away from the axes!", true))
    waves.add(new Wave(toList(
        new UnitAndAmount(DETH_NIGHT, 2),
        new UnitAndAmount(CRYPT_FREND, 8)
    )))
    waves.add(new Wave(toList(
        new UnitAndAmount(DIRE_MAMMOTH, 1)
    ), "The dire mammoths. Mammoths are undead, right?", false))
    waves.add(new Wave(toList(
        new UnitAndAmount(COIL_SNIPER, 1)
    ), "Might need to go hunt these guys down before they snipe you all.", false))
    waves.add(new Wave(toList(
        new UnitAndAmount(DETH_NIGHT, 2),
        new UnitAndAmount(CRYPT_FREND, 4),
        new UnitAndAmount(COIL_SNIPER, 1)
    )))
    waves.add(new Wave(toList(
        new UnitAndAmount(COIL_HYDRA, 1) // boss
    ), "Boss: Coil Hydras. Would you stop with the head slicing thing already?", true))
    waves.add(new Wave(toList(
        new UnitAndAmount(DIRE_MAMMOTH, 2)
    )))
    waves.add(new Wave(toList(
        new UnitAndAmount(UNSTOPPABLE_TANK, 1, true) // boss
    ), "Boss: The Unstoppable Tank. Steamrollers are no joke.", true))
    waves.add(new Wave(toList(
        new UnitAndAmount(MURLOC_DRONE, 8)
    )))
    waves.add(new Wave(toList(
        new UnitAndAmount(MURLOC_BARBATUS, 2),
        new UnitAndAmount(MURLOC_DRONE, 8)
    ), "Watch out for Barbatus. He tosses drones and his head can live on to fight another day.", false))
    waves.add(new Wave(toList(
        new UnitAndAmount(MURLOC_BARBATUS, 2),
        new UnitAndAmount(MURLOC_DRONE, 8),
        new UnitAndAmount(MURLOC_QUEEN, 1)
    ), "Boss: The Murloc Queen. Summons more murlocs, what'd you expect?", true))
    waves.add(new Wave(toList(
        new UnitAndAmount(MURLOC_GENERAL, 1, true)
    ), "Boss: The Murloc General. Watch out for Humungadunga (The big wave), go through the break.", true))
    waves.add(new Wave(toList(
        new UnitAndAmount(FIRE_ELEMENTAL, 3)
    ), "Remember: Stop, drop, and roll. Or run around screaming and set your allies on fire, whichever works.", false))
    waves.add(new Wave(toList(
        new UnitAndAmount(ICE_ELEMENTAL, 4)
    )))
    waves.add(new Wave(toList(
        new UnitAndAmount(AERO_BEAR, 1)
    ), "Do a bear-ol roll. And deflect enemy attacks...", false))
    // way too easy and poor skeletons dont properly look for gold.
    // They should have a lot more hp initially and make a b-line for gold when it drops
    // also maybe players should drop 2 or 3 250 golds when shot
    waves.add(new Wave(toList(
        new UnitAndAmount(SKELETON_ROBIN_HOOD, 1)
    )))
    waves.add(new Wave(toList(
        new UnitAndAmount(SKELETON_ROBIN_HOOD, 1),
        new UnitAndAmount(POOR_SKELETON, 3)
    ), "Boss: Skeleton Robin Hood and the Poor Skeletons. He steals from the rich and gives to the poor.", true))
    waves.add(new Wave(toList(
        new UnitAndAmount(GIANT_ENEMY_CRAB, 1, true)
    ), "Boss: So here's this giant enemy crab...", true))
    waves.add(new Wave(toList(
        new UnitAndAmount(BIG_BAD_WOLF, 1, true)
    ), "Boss: Who's afraid of the big bad wolf? Stay away from the water, and if you have nightmares: Run!", true))

    getTimer().doAfter(.1) () ->
        quest q = CreateQuest()
        q.setTitle("Waves")
        q.setIcon(Icons.bTNGhoul)
        q.setRequired(true)
        var index = 1
        for Wave wv in waves
            //waveString+= "Wave " + index.toString()
            CreateQuestItemBJ(q, "Wave " + index.toString())
            for UnitAndAmount ua in wv.units 
                let unitName = getUnitNameById(ua.typ)
                var count = ua.relativeAmount
                if(not ua.boss)
                    count *= 3
                CreateQuestItemBJ(q, "    " + count.toString() + " " + unitName)
                //waveString += "\n\t" + ua.relativeAmount.toString() + " " + unitName
            //waveString += "\n"
            index++
        //q.setDescription(waveString)
    trigger trig = CreateTrigger()
    trig.registerPlayerChatEvent(Player(0), "next", false)
    trig.addAction(() -> currentWave.forceEnd())
    forceCurrentWaveEnd = () ->
        currentWave.forceEnd()
    startWave()
    EventListener.add(EVENT_PLAYER_CHAT_FILTER) () ->
        if(GetEventPlayerChatString().startsWith("-skip "))
            string val = GetEventPlayerChatString().substring("-skip ".length())
            currentWaveIndex = val.toInt() - 1
            currentWave.forceEnd()

    trig = CreateTrigger()
    trig.registerAnyUnitEvent(EVENT_PLAYER_UNIT_DEATH)
    trig.addCondition(Condition(() -> GetDyingUnit() == THE_BANDIT))
    trig.addAction(() -> begin
        force f = GetPlayersAllies(GetDyingUnit().getOwner())
        
        if(currentWaveIndex < 3 or totalLossMode)
            f.forEach(() -> begin
                CustomDefeatBJ(GetEnumPlayer(), "Billy the Bandit has died. Better luck next time.")
            end)
        else
            currentWave.failed = true
            currentWave.forceEnd()
            THE_BANDIT = CreateUnit(THE_BANDIT.getOwner(), THE_BANDIT.getTypeId(), THE_BANDIT.getX(), THE_BANDIT.getY(), 0.0)
    end)
    EventListener.add(EVENT_PLAYER_UNIT_SUMMON) () ->
        if(GetSummoningUnit().getOwner() == Player(11))
            trackUnitInCurrentWave(GetSummonedUnit())
    EventListener.add(EVENT_PLAYER_UNIT_DEATH) () ->
        if(GetDyingUnit().getOwner() == BadGuy)
            updateBoardRemainingEnemies()
    getTimer().doAfter(.04) () ->
        currentWaveBoard = CreateLeaderboard()
        LeaderboardSetLabelBJ(currentWaveBoard, "Wave - 0")
        ForceSetLeaderboardBJ(currentWaveBoard, GOOD_GUY_FORCE)
        LeaderboardDisplayBJ(true, currentWaveBoard)
        LeaderboardAddItem(currentWaveBoard, "Remaining Enemies", 0, BadGuy)
        LeaderboardSetSizeByItemCount(currentWaveBoard, 1)
    //unit u = createUnit(Player(0), PALADOUT, gg_rct_helperArea.getCenter(), angle(0))
    //u.setLevel(12, true)
    
function updateBoardRemainingEnemies()
    if(currentWaveBoard != null and currentWave != null)
        LeaderboardSetItemValue(currentWaveBoard, LeaderboardGetPlayerIndex(currentWaveBoard, BadGuy), currentWave.actualUnits.size())
