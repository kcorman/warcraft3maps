package Waves
import LinkedList
import TimerUtils
import MonsterAbilities
import ClosureEvents
import GameInit
import UnitTrainers
import Units
import CustomUnits
constant player GoodGusy = Player(10)
constant player BadGuy = Player(11)
constant int NUM_WAVES = 13
constant int MAX_GOOD_UNITS = 5
constant int FOOTMAN = 'hfoo'
constant int SORCERESS = 'hsor'
constant int GHOUL = 'ugho'
constant int BIG_GOOL = 'u005'
constant int TUFF_ZOMBIE = 'n00D'
constant int GOST = 'n008'
constant int GHOST_GOLEM = 'n009'
constant int GENERAL_SPIDER = 'u006'
constant int NECRO = 'unec'
constant int STARCHES = 'u003'
constant int ZOMBIE = 'n00A'
constant int SKELETON_PRIEST = 'u00D'
constant int OBSIDIAN_STATUTE = 'u00E'
constant int ZOMBIEMANCER = 'u002'
constant int FOOTPERSON = 'h007'
constant int BOMBERMAN = 'h008'
constant int MEAT_WAGON = 'umtw'
constant int MEAT_WAGON_WAGON = 'u007'

constant int TAVERN_TYPE = 'n006'
constant int KEEP_TYPE = 'h005'
constant int GOOD_NEXUS_TYPE = 'h003'
constant int BAD_NEXUS_TYPE = 'n002'
constant int VILLAGER = 'u000'
constant int INITIAL_GOLD = 9001
constant int INITIAL_WOOD = 200
constant int UNIT_TRAINER_ABILITY = 'A00P'
constant rect BAD_GUY_01 = gg_rct_LandBad01
constant rect BAD_GUY_02 = gg_rct_LandBad02 
LinkedList<unit> goodUnits = new LinkedList<unit>

int currentWaveIndex = 0
LinkedList<Wave> waves = null
timerdialog timerDialog
Wave currentWave
class Wave
    LinkedList<UnitAndAmount> units
    LinkedList<unit> actualUnits
    boolean val = true
    boolean failed = false
    int counter = 0
    construct(LinkedList<UnitAndAmount> units)
        this.units = units
    
    function spawn()
        currentWave = this
        currentWave.failed = false
        actualUnits = new LinkedList<unit>
        for UnitAndAmount amt in units
            int actualAmt = (amt.relativeAmount * difficultyMultplier).toInt()
            for i = 1 to actualAmt
                unit u = CreateUnit(BadGuy, amt.typ,BAD_GUY_01.getCenterX(), BAD_GUY_01.getCenterY(), 0)
                monsterCreated(u)
                actualUnits.add(u)
                if (not amt.boss)
                    u = CreateUnit(BadGuy, amt.typ,BAD_GUY_02.getCenterX(), BAD_GUY_02.getCenterY(), 0)
                    monsterCreated(u)
                    actualUnits.add(u)
        timer orderUnits = getTimer()
        orderUnits.setData(this castTo int)
        orderUnits.startPeriodic(5, () -> (begin
            Wave wave = (GetExpiredTimer().getData() castTo Wave)
            if(wave.counter % 3 == 0)
                wave.orderAttack()
            wave.counter++
            boolean allDead = true
            for unit u in wave.actualUnits
                if(u.isAliveTrick() and u.getOwner() == Player(11))
                    allDead = false

            if allDead
                if(wave.failed)
                    print("You lost. Will restart from three waves ago.")
                    currentWaveIndex -= 3
                else
                    print("Wave defeated")
                    currentWaveIndex = currentWaveIndex + 1
                wave.actualUnits.clear()
                Utils.reviveAllheroes()
                startWave()
                GetExpiredTimer().destr()
                    
        end))
        orderAttack()
    
    function forceEnd()
        for unit u in actualUnits
            u.kill()

    function orderAttack()
        group g = GetUnitsOfPlayerMatching(BadGuy, Condition(() -> begin
            return not GetFilterUnit().isType(UNIT_TYPE_STRUCTURE) and not GetFilterUnit().hasAbility(UNIT_TRAINER_ABILITY)
        end))
        for unit u in g
            u.issuePointOrder("attack", THE_BANDIT.getPos())
        g.destr()

function purgeDeadUnits()
    LLIterator<unit> itr = goodUnits.iterator()
    while(itr.hasNext())
        unit u = itr.next()
        if(not u.isAlive())
            itr.remove()
function spawnGoodGusy()
    purgeDeadUnits()
    while(goodUnits.size() > MAX_GOOD_UNITS)
        goodUnits.pop().explode()
    LinkedList<unit> trainers = getUnitTrainers()
    LLIterator<unit> itr = trainers.iterator()
    vec2 spawnSpot = gg_rct_helperArea.getCenter()
    while(itr.hasNext())
        unit template = itr.next()
        if(template.isAliveTrick())
            unit u = createUnit(GoodGusy, template.getTypeId(), spawnSpot, angle(0))
            goodUnits.add(u)
        else
            itr.remove()


function startWave()
    if(waves.isEmpty())
        Utils.win()

    spawnGoodGusy()
    Wave wave = waves.get(currentWaveIndex)
    timer startTimer = getTimer()
    startTimer.setData(wave castTo int)
    startTimer.start(timeBetweenWaves, () -> (begin
        Wave wa = (GetExpiredTimer().getData() castTo Wave)
        wa.spawn()
        GetExpiredTimer().destr()
    end))
    if(timerDialog != null)
        DestroyTimerDialog(timerDialog)
    timerDialog = CreateTimerDialog(startTimer)
    TimerDialogSetTitle(timerDialog, "Next Wave Starting In")
    TimerDialogDisplay(timerDialog, true)

function toList(vararg UnitAndAmount units) returns LinkedList<UnitAndAmount>
    LinkedList<UnitAndAmount> result = new LinkedList<UnitAndAmount>
    for UnitAndAmount u in units
        result.add(u)
    return result
    

class UnitAndAmount
    int typ
    int relativeAmount
    bool boss

    construct(int typ, int relative, bool boss)
        this.typ = typ
        this.relativeAmount = relative
        this.boss = boss

    construct(int typ, int relative)
        this.typ = typ
        this.relativeAmount = relative
        this.boss = false
    
init


    waves = new LinkedList<Wave>


    waves.add(new Wave(toList(
        new UnitAndAmount(ZOMBIE, 5)
    )))
    waves.add(new Wave(toList(
        new UnitAndAmount(ZOMBIE, 5),
        new UnitAndAmount(GHOUL, 3)
    )))
    waves.add(new Wave(toList(
        new UnitAndAmount(ZOMBIE, 6),
        new UnitAndAmount(GHOUL, 4),
        new UnitAndAmount(TUFF_ZOMBIE, 2)
    )))
    waves.add(new Wave(toList(
        new UnitAndAmount(ZOMBIE, 6),
        new UnitAndAmount(SKELETON_PRIEST, 2),
        new UnitAndAmount(GHOUL, 4),
        new UnitAndAmount(TUFF_ZOMBIE, 2)
    )))
    waves.add(new Wave(toList(
        new UnitAndAmount(ZOMBIE, 6),
        new UnitAndAmount(SKELETON_PRIEST, 2),
        new UnitAndAmount(GHOUL, 4),
        new UnitAndAmount(TUFF_ZOMBIE, 4),
        new UnitAndAmount(BIG_GOOL, 1)
    )))
    waves.add(new Wave(toList(
        new UnitAndAmount(TUFF_ZOMBIE, 4),
        new UnitAndAmount(GHOSTMANCER, 2)
    )))
    waves.add(new Wave(toList(
        new UnitAndAmount(ZOMBIE, 7),
        new UnitAndAmount(TUFF_ZOMBIE, 2),
        new UnitAndAmount(GHOUL, 5),
        new UnitAndAmount(MEAT_WAGON, 3),
        new UnitAndAmount(BIG_GOOL, 1),
        new UnitAndAmount(GHOSTMANCER, 1)
    )))
    waves.add(new Wave(toList(
        new UnitAndAmount(GIANT_GHOUL, 1, true) // boss wave
    )))
    waves.add(new Wave(toList(
        new UnitAndAmount(ZOMBIE, 3),
        new UnitAndAmount(GHOUL, 2),
        new UnitAndAmount(TUFF_ZOMBIE, 2),
        new UnitAndAmount(BIG_GOOL, 3, false),
        new UnitAndAmount(GOST, 4),
        new UnitAndAmount(MEAT_WAGON, 1),
        new UnitAndAmount(GHOST_GOLEM, 1),
        new UnitAndAmount(GHOSTMANCER, 3)
    )))
    waves.add(new Wave(toList(
        new UnitAndAmount(ZOMBIE, 5),
        new UnitAndAmount(MEAT_WAGON, 1),
        new UnitAndAmount(ZOMBIEMANCER, 8)
    )))
    // crashes here
    waves.add(new Wave(toList(
        new UnitAndAmount(LIFE_STEALING_GHOST, 2),
        new UnitAndAmount(GHOUL, 4)
    )))
    waves.add(new Wave(toList(
        new UnitAndAmount(ZOMBIE, 5),
        new UnitAndAmount(MEAT_WAGON, 1),
        new UnitAndAmount(ZOMBIEMANCER, 8),
        new UnitAndAmount(OBSIDIAN_STATUTE,3)
    )))
    waves.add(new Wave(toList(
        new UnitAndAmount(MEAT_WAGON_WAGON, 3) // boss, kinda
    )))
    waves.add(new Wave(toList(
        new UnitAndAmount(GHOUL, 2),
        new UnitAndAmount(BIG_GOOL, 3, false),
        new UnitAndAmount(ZOMBIEMANCER, 4),
        new UnitAndAmount(GHOSTMANCER, 2),
        new UnitAndAmount(OBSIDIAN_STATUTE, 2),
        new UnitAndAmount(GHOST_GOLEM, 1)
    )))
    waves.add(new Wave(toList(
        new UnitAndAmount(GHOST_GOLEM, 6)
    )))
    waves.add(new Wave(toList(
        new UnitAndAmount(LIFE_STEALING_GHOST, 5)
    )))
    waves.add(new Wave(toList(
        new UnitAndAmount(GIANT_GHOUL, 2, false) // boss wave, kinda
    )))
    waves.add(new Wave(toList(
        new UnitAndAmount(ZOMBIE, 5),
        new UnitAndAmount(STARCHES, 1, true) // boss
    )))
    waves.add(new Wave(toList(
        new UnitAndAmount(DETH_NIGHT, 1),
        new UnitAndAmount(CRYPT_FREND, 6)
    )))
    waves.add(new Wave(toList(
        new UnitAndAmount(DETH_NIGHT, 2),
        new UnitAndAmount(CRYPT_FREND, 8)
    )))
    waves.add(new Wave(toList(
        new UnitAndAmount(COIL_SNIPER, 1)
    )))
    waves.add(new Wave(toList(
        new UnitAndAmount(DETH_NIGHT, 2),
        new UnitAndAmount(CRYPT_FREND, 4),
        new UnitAndAmount(COIL_SNIPER, 1)
    )))
    waves.add(new Wave(toList(
        new UnitAndAmount(COIL_HYDRA, 1) // boss
    )))
    waves.add(new Wave(toList(
        new UnitAndAmount(UNSTOPPABLE_TANK, 1) // boss
    )))

    waves.add(new Wave(toList(
        new UnitAndAmount(DETH_NIGHT, 2),
        new UnitAndAmount(CRYPT_FREND, 8),
        new UnitAndAmount(COIL_SNIPER, 2),
        new UnitAndAmount(COIL_HYDRA, 1) // boss
    )))
    waves.add(new Wave(toList(
        new UnitAndAmount(GIANT_GHOUL, 10, false) // boss wave, kinda
    )))
    waves.add(new Wave(toList(
        new UnitAndAmount(COIL_HYDRA, 1), // boss
        new UnitAndAmount(UNSTOPPABLE_TANK, 2)
    )))
    trigger trig = CreateTrigger()
    trig.registerPlayerChatEvent(Player(0), "next", false)
    trig.addAction(() -> currentWave.forceEnd())
    forceCurrentWaveEnd = () ->
        currentWave.forceEnd()
    startWave()
    EventListener.add(EVENT_PLAYER_CHAT_FILTER) () ->
        if(GetEventPlayerChatString().startsWith("-skip "))
            string val = GetEventPlayerChatString().substring("-skip ".length())
            currentWaveIndex = val.toInt() - 1
            currentWave.forceEnd()

    trig = CreateTrigger()
    trig.registerAnyUnitEvent(EVENT_PLAYER_UNIT_DEATH)
    trig.addCondition(Condition(() -> GetDyingUnit() == THE_BANDIT))
    trig.addAction(() -> begin
        force f = GetPlayersAllies(GetDyingUnit().getOwner())
        
        if(currentWaveIndex < 3)
            f.forEach(() -> begin
                CustomDefeatBJ(GetEnumPlayer(), "Fin")
            end)
        else
            currentWave.failed = true
            currentWave.forceEnd()
            THE_BANDIT = CreateUnit(THE_BANDIT.getOwner(), THE_BANDIT.getTypeId(), THE_BANDIT.getX(), THE_BANDIT.getY(), 0.0)
    end)

