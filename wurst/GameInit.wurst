package GameInit
import LinkedList
import HashMap
import TimerUtils
import ClosureTimers
import Effect
import Assets
import Quest
import SoundUtils
import CustomUnits
import ClosureEvents
import PTQConstants
import MonsterAbilities
import DialogBox
import UnitTrainers
//Units\Other\DalaranMutant\ZombieB.BLP
constant int FOOTMAN = 'hfoo'
constant int SORCERESS = 'hsor'
constant int GHOUL = 'ugho'
constant int NECRO = 'unec'
constant int TAVERN_TYPE = 'n006'
constant int KEEP_TYPE = 'h005'
constant int GOOD_NEXUS_TYPE = 'h003'
constant int BAD_NEXUS_TYPE = 'n002'
constant int VILLAGER = 'u000'
constant int INITIAL_GOLD = 9001
constant int INITIAL_WOOD = 200
constant vec2 SHOP1LOC = vec2(7318., -12387.)
constant vec2 MERC1LOC = vec2(9390., -11863.)
constant vec2 WEAPON_SHOP_LOC = gg_rct_weaponshop.getCenter()
public unit THE_BANDIT = gg_unit_n000_0018
public unit COOL_TAVERN
constant rect BanditCamp = gg_rct_BanditCamp
constant LinkedList<unit> playerHeroes = new LinkedList<unit>
public constant force GOOD_GUY_FORCE = CreateForce()
public constant boolean CINEMATIC_ENABLED = true

unit weaponShop

public interface Runnable
    function run()

public Runnable forceCurrentWaveEnd = null
class FriendlyStuff
    player cpu
    unit tavern
    unit fountain
    unit nexus
    unit enemyNexus
    LinkedList<unit> keeps
    LinkedList<unit> knownUnits = new LinkedList<unit>

    construct(player cpu, boolean good)
        this.cpu = cpu
        if(good) 
            this.nexus = Utils.getOwnedUnitOfType(cpu, GOOD_NEXUS_TYPE)
        else
            this.nexus = Utils.getOwnedUnitOfType(cpu, BAD_NEXUS_TYPE)
        this.tavern = Utils.getOwnedUnitOfType(cpu, TAVERN_TYPE)
        this.keeps = Utils.getOwnedUnitsOfType(cpu, KEEP_TYPE)
        for unit keep in keeps
            if(good)
                createUnitSpawner(FOOTMAN, keep)
                createUnitSpawner(FOOTMAN, keep)
                createUnitSpawner(FOOTMAN, keep)
                createUnitSpawner(SORCERESS, keep)
            else
                createUnitSpawner(GHOUL, keep)
                createUnitSpawner(GHOUL, keep)
                createUnitSpawner(GHOUL, keep)
                createUnitSpawner(NECRO, keep)

    function createUnitSpawner(int unitType, unit keep)
        unit u = createUnit(keep.getOwner(),unitType, keep.getPos(), angle(0))
        u.addAbility(UNIT_TRAINER_ABILITY)

    function getTemplateUnitsForKeep(unit keep) returns group
        group g = GetUnitsInRangeOfLocMatching(600, Location(keep.getX(), keep.getY()), Condition(() -> (begin
            return GetFilterUnit().hasAbility(UNIT_TRAINER_ABILITY)
        end)))
        return g

    function doSpawn()
        for unit keep in keeps
            group g = getTemplateUnitsForKeep(keep)
            print("Found " + g.size().toString() + " template units ")
            for unit u in g
                createUnit(cpu, u.getTypeId(), keep.getPos(), angle(0))
            g.destr()
    function doOrderUnits()
        group g = GetUnitsOfPlayerMatching(cpu, Condition(() -> begin
            return not GetFilterUnit().isType(UNIT_TYPE_STRUCTURE) and not GetFilterUnit().hasAbility(UNIT_TRAINER_ABILITY)
        end))
        for unit u in g
            u.issuePointOrder("attack", enemyNexus.getPos())
        g.destr()

    function startSpawners()
        timer spawn = getTimer()
        spawn.setData(this castTo int)
        spawn.startPeriodic(15, () -> (begin
            FriendlyStuff fs = (GetExpiredTimer().getData() castTo FriendlyStuff)
            fs.doSpawn()
            fs.doOrderUnits()
            print("Spawned and ordered units")
        end))

public class Utils
    // i don't know how to properly iterate Wurst arrays, so here's a nice linked list instead
    static LinkedList<player> allPlayers = new LinkedList<player>
    static FriendlyStuff goodGusy
    static FriendlyStuff badGusy
    static int numPlayers = 0
    static HashMap<player, FriendlyStuff> friendlies = new HashMap<player, FriendlyStuff>
    
    static function buyHero(unit hero)
        // unit tavern = friendlies.get(hero.getOwner()).tavern
        playerHeroes.add(hero)

    static function win()
        force f = GetPlayersAllies(GoodGusy)
            
        f.forEach(() -> begin
            CustomVictoryBJ(GetEnumPlayer(), true, true)
        end)
    static function reviveAllheroes()
        for hero in playerHeroes
            hero.revive(BanditCamp.getCenter(), true)
            hero.setHP(hero.getMaxHP())
            hero.setMana(hero.getMaxMana())
    static function resetAllHeroes()
        for hero in playerHeroes
            hero.revive(BanditCamp.getCenter(), true)
            hero.setHP(hero.getMaxHP())
            hero.setMana(hero.getMaxMana())
            hero.setPos(BanditCamp.getCenter())
    static function getOwnedUnitOfType(player onwer, int typ) returns unit
        group g = GetUnitsOfTypeIdAll(typ)
        unit result = null
        for unit u in g
            if(u.getOwner() == onwer)
                result = u
                break
        g.destr()
        return result
    
    static function getOwnedUnitsOfType(player owner, int typ) returns LinkedList<unit>
        LinkedList<unit> result = new LinkedList<unit>
        group g = GetUnitsOfTypeIdAll(typ)
        for unit u in g
            if(u.getOwner() == owner)
                result.add(u)
        g.destr()
        return result

    static function getFriendlyUnitOfType(player friend, int typ) returns unit
        group g = GetUnitsOfTypeIdAll(typ)
        unit result = null
        for unit u in g
            if(u.getOwner().isAllyOf(friend))
                result = u
                break
        g.destr()
        return result
public class Option<T>
    T value
    string name
    construct(T value, string name)
        this.value = value
        this.name = name

public function createOption(int val, string units) returns Option<int>
    return new Option<int>(val, val.toString() + " " + units)

public function createOptionReal(real val, string units) returns Option<real>
    return new Option<real>(val, val.toString() + " " + units)

public function createOptionString(string val) returns Option<string>
    return new Option<string>(val, val)

public interface TSettingClosure<T>
    function run(Option<T> setting)

function createDialogueForSetting<T>(player p, string settingName,LinkedList<Option<T>> options, DialogBox nextWindow, TSettingClosure<T> settingHandler) returns DialogBox
    DialogBox d = new DialogBox(settingName)
    for Option<T> option in options
        d.addButton(settingName + " " + option.name) () ->
            destroy(d)
            print(settingName + " set to " + option.name)
            settingHandler.run(option)
            if(nextWindow != null)
                nextWindow.display(p, true)
    return d


unit banditHelper1
unit banditHelper2
sound helpUsOut = gg_snd_HiredToHelpUsOut
sound foodOnTheTable = gg_snd_FoodOnTheTable
function panCameraForForce(force f, camerasetup cam, real duration)
    for player p in Utils.allPlayers
        if(f.containsPlayer(p))
            p.cameraSetupApply(true, cam, duration)
// this function gets run once a few milliseconds after the game starts
function postInit()
    quest q = CreateQuest()
    q.setTitle("Credits")
    q.setIcon(Icons.bTNScepterOfMastery)
    q.setRequired(false)
    q.setDescription("Created By: WillemTheFoe\nBuilt with WurstScript (https://wurstlang.org/)\nAll Custom Models came from Hiveworkshop\nDemoness: nightelfbuilder\nShadow Dragon: Thrikodius\nSkeleton Mammoth: kako2742\nDevil Tower (Succorbenoth): Kuhneghetz\nVoid Rain (Soul Wyrm Spell): Mythic\nRodent Artilliry (Warplock Jezzail): Gluma\nElephant: GolluM_KoMe\nRussian Officer: HerrDave\nKeeper of The Sylar: WillemTheFoe\nThe Senate: WillemTheFoe\nRabbit and Tigger: WillemTheFoe\nTommy Wisearthas: WillemTheFoe\n")
    texttag t = createTTEx(gg_rct_unittrainers.getCenter().withTerrainZ(150) + vec3(0,50,0), "Purchase Builders Here", 10, colorA(255,50,50,255))
    getTimer().doAfter(300) () ->
        t.destr()
    if(CINEMATIC_ENABLED)
        doIntiialCinematic()
function doIntiialCinematic()
    group g = getUnitsInRangeOfLocMatchingClosure(400, THE_BANDIT.getPos()) (unit u) ->
        return not u.isType(UNIT_TYPE_STRUCTURE) and u.getOwner() == THE_BANDIT.getOwner()
    banditHelper1 = g.next()
    banditHelper2 = g.next()
    g.close()
    SetUnitFacingToFaceUnitTimed(banditHelper1, THE_BANDIT, 0)
    SetUnitFacingToFaceUnitTimed(banditHelper2, THE_BANDIT, 0)
    EventListener.add(banditHelper2, EVENT_PLAYER_UNIT_DEATH) () ->
        PlaySoundBJ(gg_snd_AssassinDeath1)
        StopSoundBJ(gg_snd_FoodOnTheTable, false)
    if(CINEMATIC_ENABLED)
    CinematicModeBJ(true, GetPlayersAll())
    force cinematicPlayers = CreateForce()
    for player p in Utils.allPlayers
        cinematicPlayers.addPlayer(p)
    EventListener.add(EVENT_PLAYER_END_CINEMATIC) () ->
        let p = GetTriggerPlayer()
        force f = GetForceOfPlayer(p)
        CinematicModeBJ(false, f)                                    
        p.resetToGameCamera(0) 
        p.setCameraPosition(COOL_TAVERN.getPos())

        cinematicPlayers.removePlayer(p)
        f.destr()
    cinematicPlayers.forEach() ->        
        player p = GetEnumPlayer()
        p.disableUserControl()

    panCameraForForce(cinematicPlayers, gg_cam_s1, 0)
    getTimer().doAfter(1) () ->
            panCameraForForce(cinematicPlayers, gg_cam_s2, 3)
            getTimer().doAfter(4) () ->
                panCameraForForce(cinematicPlayers, gg_cam_s3, 2)
                getTimer().doAfter(4) () ->
                    panCameraForForce(cinematicPlayers, gg_cam_s4, 3)
                    getTimer().doAfter(1.5) () ->
                        TransmissionFromUnitWithNameBJ(cinematicPlayers, banditHelper1, "Highwayman Johnson", gg_snd_HiredToHelpUsOut, "Hey... so you know those undead minions we hired to help us out? Well... they're revolting now.", bj_TIMETYPE_ADD, 0, false)
                        SetUnitFacingToFaceUnitTimed(THE_BANDIT, banditHelper1, 1)
                        getTimer().doAfter(6.5) () ->
                            TransmissionFromUnitWithNameBJ(cinematicPlayers, THE_BANDIT, "Billy The Bandit", gg_snd_BanditPissed1, "What we have here is a failure to communicate...", bj_TIMETYPE_ADD, 0, false)
                            getTimer().doAfter(3.1) () ->
                                TransmissionFromUnitWithNameBJ(cinematicPlayers, THE_BANDIT, "Billy The Bandit", gg_snd_BanditPissed2, "I usually work alone", bj_TIMETYPE_ADD, 1, false)
                                getTimer().doAfter(1.1) () ->
                                    TransmissionFromUnitWithNameBJ(cinematicPlayers, banditHelper2, "Pursesnatcher Zack", gg_snd_FoodOnTheTable, "Th-th-this is why I've said all along we shouldn't have hired the undead minions because they're going to kill us. I dunno about you guys, but I got a family at home and I gotta put food on the table...", bj_TIMETYPE_ADD, 0, false)
                                    SetUnitFacingToFaceUnitTimed(THE_BANDIT, banditHelper2, 5)
                                    getTimer().doAfter(9) () ->
                                        banditHelper2.setHP(2)
                                        THE_BANDIT.issueTargetOrder("attack", banditHelper2)
                                        SetUnitExploded(banditHelper2, true)
                                        getTimer().doAfter(2) () ->
                                            TransmissionFromUnitWithNameBJ(cinematicPlayers, THE_BANDIT, "Billy The Bandit", gg_snd_BanditYesAttack2, "Say your prayers!", bj_TIMETYPE_ADD, 0, false)
                                            THE_BANDIT.setFacing(THE_BANDIT.getPos().angleTo(gg_rct_helperArea.getCenter()))                                   
                                            getTimer().doAfter(2) () ->
                                                cinematicPlayers.forEach() ->
                                                    GetEnumPlayer().resetToGameCamera(0)
                                                    GetEnumPlayer().setCameraPosition(COOL_TAVERN.getPos())
                                                CinematicModeBJ(false, cinematicPlayers)

init
    //SetCameraBoundsToRect(gg_rct_PlayableArea)
    int i = 0
    while(i < 12)
        if(players[i].getSlotState() == PLAYER_SLOT_STATE_PLAYING and players[i].getController() == MAP_CONTROL_USER)
            Utils.numPlayers++
            Utils.allPlayers.add(players[i])
        i++
    
    Utils.goodGusy = new FriendlyStuff(Player(10), true)
    Utils.badGusy = new FriendlyStuff(Player(11), false)
    Utils.goodGusy.enemyNexus = Utils.badGusy.nexus
    Utils.badGusy.enemyNexus = Utils.goodGusy.nexus
    //Utils.goodGusy.startSpawners()
    //Utils.badGusy.startSpawners()
    for player p in Utils.allPlayers
        if(p.isAllyOf(Utils.goodGusy.cpu))
            Utils.friendlies.put(p, Utils.goodGusy)
            GOOD_GUY_FORCE.addPlayer(p)
        else
            Utils.friendlies.put(p, Utils.badGusy) 
        FriendlyStuff fs = Utils.friendlies.get(p)

        unit vlg = createUnit(p, VILLAGER, gg_rct_cooltavern.getCenter() + vec2(0, 200), angle(0))
        //vlg.hide()
        //vlg.setInvulnerable(true)
        p.addGold(INITIAL_GOLD)
        p.addLumber(INITIAL_WOOD)

            
    ModifyGateBJ( bj_GATEOPERATION_OPEN, gg_dest_LTe3_0494 )
    LinkedList<unit> taverns = new LinkedList<unit>
    taverns.add(Utils.goodGusy.tavern)
    taverns.add(Utils.badGusy.tavern)
    trigger t = CreateTrigger()
    t.registerAnyUnitEvent(EVENT_PLAYER_UNIT_SELL)
    t.addCondition(Condition(() -> IsUnitType(GetSoldUnit(), UNIT_TYPE_HERO)))
    t.addAction(() -> Utils.buyHero(GetSoldUnit()))




    COOL_TAVERN = createUnit(Player(0), coolTavern, gg_rct_cooltavern.getCenter(), angle(0))
    //u = createUnit(Player(0), SOUL_WYRM, gg_rct_cooltavern.getCenter(), angle(0))
    // monsterCreated(u)
    //u = createUnit(Player(0), SYLAR, gg_rct_testzone.getCenter(), angle(0))
    //u.setLevel(12, true)
    //u.setLevel(12, true)
    //unit u = createUnit(Player(0), SYLAR, gg_rct_helperArea.getCenter(), angle(0))
    //u.setLevel(12, true)
    //monsterCreated(u)
    
    weaponShop = createUnit(Player(10), WEAPON_SHOP, WEAPON_SHOP_LOC, angle(0.))
    getTimer().doAfter(.04) ->
        postInit()
    EventListener.add(EVENT_PLAYER_UNIT_DEATH) () ->
        let ded = GetDyingUnit()
        if(ded.getOwner().isAllyOf(GoodGusy) and ded.isType(UNIT_TYPE_HERO))
            printTimedToPlayer("Your hero has died and will be ressurected if your team finishes this wave.", 6, ded.getOwner())
    EventListener.add(EVENT_PLAYER_CHAT_FILTER) () ->
        if(GetEventPlayerChatString() == "-settings")
            player p = GetTriggerPlayer()
            DialogBox difficulty = createDialogueForSetting(p, "Difficulty", new LinkedList<Option<int>>..add(createOption(1, "DU"), createOption(2, "DU"), createOption(3, "DU"), createOption(4, "DU")), null)(val) ->
                difficultyMultplier = val.value.toReal()
            DialogBox timeSetting = createDialogueForSetting(p, "Time Between Waves", new LinkedList<Option<int>>..add(
            createOption(1, "Seconds"), 
            createOption(5, "Seconds"), 
            createOption(10, "Seconds"), 
            createOption(20, "Seconds"), 
            createOption(30, "Seconds")), null)(val) ->
                timeBetweenWaves = val.value.toReal()

            
            DialogBox debug = new DialogBox("Debug")
            debug.addButton("Force Kill Current Wave") () ->
                print ("Forcing current wave to end")
                if(forceCurrentWaveEnd != null)
                    forceCurrentWaveEnd.run()
            debug.addButton("Revive and Move all heroes to center") () ->
                print("Reviving and moving all heroes to center")
                Utils.resetAllHeroes()
            debug.addButton("Close Menu") () ->
                // do nothing
            DialogBox menu = new DialogBox("Menu")
            menu.addButton("Difficulty") () ->
                difficulty.display(p, true)
            menu.addButton("Time Between Waves") () ->
                timeSetting.display(p, true)
            menu.addButton("Debug Menu") () ->
                debug.display(p, true)
            menu.display(p, true)

    