package ClockworkOwnage
import ClosureEvents
import CustomAbilities
import GameTimer
import ClosureTimers
import TimerUtils
import ClosureForGroups
import Texttag
import Vectors
import Destructable
import Effect
import Assets
import OrderIds
import HashSet
import Lightning
import DummyCaster
import Knockback3
import AbilityUtils
import SoundUtils
import LinkedList
import CustomUnits
import MissleEffects
import HashList
import HashMap
import PTQConstants
import Sound
let SOUND_SURPRISE_VISIT = new SoundDefinition("Sounds\\SurpriseVisit.mp3", false)
let SOUND_INOUT = new SoundDefinition("Sounds\\InoutInout.mp3", false)
let SOUND_FILTHY_OLD_SYKA = new SoundDefinition("Sounds\\FilythOldSyka.mp3", false)
var lastAttacked = getElapsedGameTime()

class InOutInOut
    LinkedList<unit> participants
    unit victim
    unit caster
    CallbackCounted cb
    construct(unit caster, unit victim)
        participants = new LinkedList<unit>
        this.victim = victim
        this.caster = caster
        let io = this
        cb = doPeriodicallyTimed(.04, 8) (CallbackCounted cb) ->
            if(cb.isLast())
                destroy io
            else
                doTick()
    function doTick()
        var index = 0
        for unit u in participants
            let ang = (PI * getElapsedGameTime() + (PI2 / participants.size()) * index).asAngleRadians()
            u.setXY(victim.getPos() + ang.toVec(100))
            SetUnitFacingToFaceUnitTimed(u, victim, 0)
            index+=1
        if(not victim.isAlive())
            cb.stop()
            destroy this

    function addParticipant(unit part)
        participants.add(part)
        part.issueTargetOrder("attack", victim)

    ondestroy
        caster.disableAbility(ABILITY_SURPRISE_VISIT, false, false)
        destroy participants
init
    EventListener.onCast(ABILITY_INOUT) (unit caster) ->
        group potentialTargets = getUnitsInRangeOfLocMatchingClosure(1500, caster.getPos()) (unit u) ->
            return u.isAlive() and not u.isInvulnerable() and u.isType(UNIT_TYPE_HERO)
        if(not potentialTargets.isEmpty())
            
            caster.disableAbility(ABILITY_SURPRISE_VISIT, true, false)
            let target = potentialTargets.getRandomUnit()
            potentialTargets.destr()
            SOUND_INOUT.play()
            group attackers = getUnitsInRangeOfLocMatchingClosure(1200, caster.getPos()) (unit u) ->
                return u == caster or (u.isAlive() and u.getTypeId() == CLOCKWORK_DROOG and not u.getOwner().isEnemyOf(caster.getOwner()))
            
            caster.pause()
            for unit attacker in attackers
                attacker.issueTargetOrder("move", caster)
            doAfter(3) () ->
                caster.unpause()
                let io = new InOutInOut(caster, target)
                for unit attacker in attackers
                    addToBayWatch(attacker, 15)
                    attacker.attemptJumpToTarget(target, 1000, 500) (boolean hitTarget) ->
                        if(hitTarget)
                            io.addParticipant(attacker)
                   
                attackers.destr()


    EventListener.onCast(ABILITY_SURPRISE_VISIT) (unit caster) ->
        group potentialTargets = getUnitsInRangeOfLocMatchingClosure(1500, caster.getPos()) (unit u) ->
            return u.isAlive() and not u.isInvulnerable() and u.isType(UNIT_TYPE_HERO)
        if(not potentialTargets.isEmpty())
        
            caster.disableAbility(ABILITY_INOUT, true, false)
            let target = potentialTargets.getRandomUnit()
            potentialTargets.destr()
            SOUND_SURPRISE_VISIT.play()
            group attackers = getUnitsInRangeOfLocMatchingClosure(1200, caster.getPos()) (unit u) ->
                return u == caster or (u.isAlive() and u.getTypeId() == CLOCKWORK_DROOG and not u.getOwner().isEnemyOf(caster.getOwner()))
            for unit attacker in attackers
                addToBayWatch(attacker, 15)
                flashEffect(Abilities.polyMorphTarget, attacker.getPos3Real() + vec3(0,0,100))
                attacker.hide()
                attacker.pause()
                attacker.setInvulnerable(true)
            doAfter(9) () ->
                for unit attacker in attackers
                    attacker.unpause()
                    attacker.show()
                    attacker.setInvulnerable(false)
                    attacker.setPos(target.getPos() + GetRandomReal(0, PI2).asAngleRadians().toVec(150))
                    SetUnitFacingToFaceUnitTimed(attacker, target, 0)
                    attacker.issueTargetOrder("attack", target)
                attackers.destr()
                target.pause()
                let ef = addEffect(Abilities.stasisTotemTarget, target, "overhead")
                doAfter(2) () ->
                    
                    caster.disableAbility(ABILITY_INOUT, false, false)
                    target.unpause()
                    ef.destr()
    EventListener.add(EVENT_PLAYER_UNIT_ATTACKED) () ->
        if(EventData.getTriggerUnit().getTypeId() == CLOCKWORK_ALEX)
            let target = GetAttackedUnitBJ()
            let alex = EventData.getTriggerUnit()
            let currentTime = getElapsedGameTime()
            if(currentTime - lastAttacked > 9)
                SOUND_FILTHY_OLD_SYKA.playOnPoint(alex.getPos3Real())
                lastAttacked = currentTime
                alex.addAbility(ABILITY_ALEX_KNOCKBACK)
                alex.issueTargetOrderById(OrderIds.firebolt, target)
    EventListener.onCast(ABILITY_ALEX_KNOCKBACK) (caster) ->
        let target = EventData.getSpellTargetUnit()
        addToBayWatch(target, 10)
        doAfter(.5) () ->
            Knockback3.add(target, 2000, caster.getFacingAngle(), angle(PI / 2.5))
            caster.damageTarget(target, 400)
            caster.removeAbility(ABILITY_ALEX_KNOCKBACK)
        